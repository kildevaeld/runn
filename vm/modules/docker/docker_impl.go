// Code generated by go-bindata.
// sources:
// docker.async.js
// builder.js
// DO NOT EDIT!

package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerAsyncJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4b\x6f\xe3\x36\x10\x3e\x4b\xbf\x82\x16\xb0\xa0\x14\x5b\x72\xcf\x31\xdc\xa2\xe8\x03\xd8\x1e\xba\xc5\xf6\xe8\x18\x81\x62\xd3\x36\xd7\x7a\x95\xa4\xdc\x04\x8e\xfb\xdb\x3b\x33\xa4\x5e\xb6\x37\xd9\x60\x77\x73\xb0\x69\xce\xcc\x37\x0f\xce\x7c\x64\x0e\xa9\x62\x7a\xc7\xe6\x4c\x89\x7f\x6a\xa9\x44\xc8\xf5\x8e\x47\x13\xdf\xdb\x94\x2a\x4f\x4d\x5f\x50\x1b\x99\xf1\x28\xb1\x02\xd0\xb8\x1f\x08\x8b\xb5\x50\x7a\x55\x2a\xc1\xa3\x99\xef\x13\x6c\x26\x57\x02\x74\x7e\x56\x2a\x7d\x4a\x2a\x55\x9a\xd2\x3c\x55\x22\xa1\x7d\xd0\xf1\x37\x75\xb1\x32\xb2\x2c\xd8\xaf\xe5\x6a\x2f\x54\x58\x56\xf8\x4b\x47\xec\xe8\x7b\x6e\x0d\xe6\x6e\xf5\xfc\x7c\x3c\xf9\x9e\xd9\x49\x9d\xac\xc5\x43\xbd\xed\x24\xf6\xb7\x7f\xf2\x7d\xf1\x58\x95\xca\xe8\xc4\xe2\x81\x86\x5d\xcc\x7a\xae\x56\x69\x96\x85\xab\x7c\x3d\x61\xa9\xda\xea\x09\x23\x5b\xf2\xe8\x7b\x14\x34\x58\x05\x6b\x6b\x1f\xb0\x31\x03\xd5\xc4\x28\x99\x87\x91\xef\xc9\x0d\x0b\xd1\x8a\xd4\x3d\xcd\xc6\xa0\x4a\x4a\xa1\x4d\x51\x6a\xfa\x76\x3a\x3f\x91\x87\xe4\x53\x29\x8b\x90\x33\x1e\xb1\x5b\xda\x80\xea\x78\x90\x08\xfa\xd1\x89\xae\x32\x69\x48\x9a\xe4\x69\x15\xb6\x51\x86\x39\xf8\x80\xe2\x9a\x5a\x15\x2c\x77\x01\xcc\xd8\x29\xea\xe0\x9a\x4d\xa8\xa3\x37\x9d\x36\xa1\xdb\xc3\x09\xf9\x3b\xcd\xde\x69\x3e\x61\x6d\xa6\x9d\x21\x24\xe2\x80\x0b\xf1\x2f\xfb\x4b\x95\xb9\xd4\xa2\xe7\x5a\x09\x5d\x66\x07\x31\x01\xf7\x9f\xc4\xca\xd8\x64\x31\x75\x5b\x2a\xf8\xe1\xad\xa0\xea\x65\x26\x92\xac\xdc\x86\x1c\x2b\x7a\x0b\xae\x30\x33\x10\xe6\xe5\xba\x06\xd1\xfd\x7d\xa5\xe4\x21\x35\xe2\xde\x16\x33\x84\x5a\x77\x3e\x84\x52\x88\xaf\xeb\xcc\xe1\x93\x03\xd8\x8d\x9a\xa4\xad\x73\xda\x9a\xa1\xdc\x45\x15\x5a\x23\x97\x3c\x89\x4e\x54\x51\xfc\xc0\x16\xa0\xce\xa3\x5e\x6b\x8f\xbf\x6b\x3d\x2b\xcd\x01\x40\x42\xde\x15\x16\x6c\xc1\x45\x71\x80\xe8\xf1\xeb\x77\x99\x09\x5c\x56\xf5\x43\x26\x61\x0c\x60\x79\x28\xb3\x3a\xa7\xcd\x4c\x16\x7b\xbe\x04\x07\x84\x96\xac\x94\x80\xe4\xb0\xe2\x6d\x52\x45\x9a\x43\xd5\x64\x9e\x6e\xe1\xeb\xc5\x5e\x66\xcf\xcf\xec\x78\x82\x72\x31\xf8\xc3\x90\x36\x59\xba\xa5\x68\x96\x90\x05\x6e\xc2\x39\xb2\x10\x25\x7b\xf1\xc4\x64\x31\x80\xa3\x5a\x8d\x46\xff\x2d\x38\xf9\xe2\xcb\x44\xc2\xf0\x3d\x7e\xd8\x84\xa0\x1c\x45\x0c\x4e\xc7\xc8\xa2\x86\x11\x63\xee\x0f\x81\x0e\x69\xd6\x05\xb0\x00\xcd\x65\x27\x77\x80\x5d\x61\xce\x10\x8f\xad\x66\xa3\xdd\x96\x8b\xcd\xe7\x18\x63\x44\x81\xce\xa9\x8c\xf1\x06\x05\x17\x26\x78\x00\xe5\xc6\xc6\x01\x46\x5c\xc3\x19\x16\x5b\x7e\x8e\x6e\xe3\xc5\x58\x17\x41\x1c\xe3\x74\x21\xf2\x98\x05\x73\x5c\x83\xa4\x17\x37\xfe\x9d\x98\xc8\xb4\x20\x0f\xc3\x29\x04\xd5\xc8\x35\x97\x67\x01\xe1\xf3\x6c\xcc\x0e\xbd\x31\xe3\x71\xcc\x5b\x6f\x7c\x8e\xeb\x03\x8e\x1c\xb5\x9f\xf3\xd2\xc2\x29\x56\xd6\x86\x0e\x8c\xc4\x5e\x77\x5e\x78\x5a\xe8\xda\xa9\x92\xee\xc1\x3a\x5f\xec\x97\x76\x0f\x83\x9d\xde\xad\xc7\xd3\xc4\x08\x6d\xc2\x7d\x1b\xa7\xe7\xed\x91\x7f\x02\xfb\xc3\x39\xed\x44\xe3\xb9\x2d\xf3\xdc\xb5\x23\x70\x4c\x70\x1b\x00\xb1\x40\x71\x9c\x89\xfd\x82\xe0\x92\xaa\xd6\xbb\x70\x90\x94\x2d\xe1\x1e\x13\xb3\x59\x79\x7e\x67\xe3\xfa\xa3\x36\x36\xdf\x41\x8d\xa9\x3d\x2d\x20\xd6\xb0\xa3\x92\xee\x28\xda\x58\x3f\x63\x77\xad\xba\x50\xa5\x1e\x80\x6f\x3f\x1d\x0f\x23\x67\x51\x29\x66\x96\x77\x2d\x54\x26\x8a\xad\xd9\xb1\x1f\xd9\x0f\xb6\x62\x4e\xcb\xb1\x5e\x00\xac\x17\x4c\x9c\xd7\x7e\x90\x98\x22\xa9\x8e\x3b\x86\x8c\xd7\x2c\x8e\x71\x64\xe7\x0d\x57\xf6\xe6\x17\x6d\x5c\x5b\xd0\x85\x11\xa8\xba\x08\x9a\x2b\xa3\xbb\x83\x22\x64\x1c\xcb\x07\xda\xa4\xca\x5c\xd0\x01\x45\x39\x00\x22\xbd\xa0\x71\xd6\x83\x9a\x01\xd6\xf4\xe6\x25\xb0\x6b\xdc\x82\x35\x7b\x13\xbd\xbc\x42\x2e\x6f\x61\x8c\xa6\x15\x5b\x2a\x00\xb7\xbd\xbd\xc1\xef\x86\x52\xbf\x11\x97\x8c\xae\x8f\xfa\x67\x78\x04\x49\x63\xc8\x19\xfe\xa5\xd6\x5b\xc8\x81\xf5\xc8\xe1\xbb\xce\x09\xbb\x36\x27\x6e\x50\xec\x9c\xb4\x17\xbc\x9b\x93\x11\xb5\xd4\x2e\xd5\xbf\xc0\x2d\x90\xca\x02\x6e\x5e\x6a\x44\x3b\x2f\xa0\x8d\x43\x85\xdd\x7c\x31\x3d\x38\x11\x30\x0a\x76\x28\x58\x33\x14\x67\xc3\x74\x31\x25\x3d\xfa\x25\xcf\x52\x7f\xac\x8b\x02\x88\xfd\x8a\x5b\x59\xe8\x0a\x2e\xf5\x9e\xeb\x56\xa6\x77\x89\x78\x14\xab\x90\xbb\xa7\x97\x53\x65\xf1\x86\x1d\x8f\xc9\xfb\xf5\xe9\x44\xa5\x20\x4c\x18\x8f\x35\x12\x5c\xf3\x2c\xeb\xd1\xa4\x73\xe4\x40\xec\x18\x05\xce\x0e\x79\xad\x71\x03\x7a\xc4\x80\x56\xff\x0b\x9c\x12\x85\xb8\x5e\xe8\x83\x0c\x63\x81\x19\xbe\x99\x76\x8c\x50\x56\x83\x19\xbe\x20\x03\x8e\x2a\xf8\x72\xc2\x07\x71\x42\x5b\x50\x17\x78\x6f\x14\x46\x47\x44\x08\x0e\x4a\xe5\x00\xe4\x96\x22\x2f\x0f\x97\xef\x8e\x4b\x6c\xb0\x89\x37\x00\xbe\x40\xf1\x72\x88\x26\xcf\xe0\xde\xe3\x69\x7e\x11\xa6\xbc\x8a\xf8\x50\xcb\x6c\x3d\xb0\xaf\x52\xb3\x03\x7a\x4b\xb7\x97\x20\xa4\x8c\x30\xd0\xea\xa0\xc0\x49\x6d\xc2\xd0\x62\x00\xda\x76\xd2\xf5\xc0\xb0\xf9\x95\x40\x21\x3e\x63\x3f\x8a\xed\x6f\x8f\x55\xc8\xef\xee\xf4\x4d\xd8\x1c\x1a\x4e\x50\x04\x3b\x63\x1e\x9d\xc5\x50\x69\x7c\x40\xef\x44\xd1\x1b\x77\x38\x46\xdb\xad\xed\x0b\x74\x6b\xaf\x67\x14\xb8\x27\x66\x1b\x5c\x7f\xc0\xbe\x4f\x7c\xf0\xe4\x8c\xd3\xaf\x8c\x12\x28\x77\x78\x8d\x00\xf8\xe5\x95\x54\x69\xb8\x8f\x46\x23\x58\xc3\x7b\x02\x1e\x5d\x69\xb0\x84\x27\xc5\x62\x79\x96\xef\x0b\x4d\xf2\xd6\x5c\xcf\xb2\x25\x32\xf9\xda\x13\x69\x86\xf7\xf5\x2e\x76\x9a\xee\xc6\x87\x70\x5e\xf3\xfb\xc7\xdf\x1f\xfe\x4c\xaa\x54\xc1\xbf\x49\xad\x67\x74\xfc\x7f\x00\x00\x00\xff\xff\x11\x36\xf6\xa3\x3c\x0f\x00\x00")

func dockerAsyncJsBytes() ([]byte, error) {
	return bindataRead(
		_dockerAsyncJs,
		"docker.async.js",
	)
}

func dockerAsyncJs() (*asset, error) {
	bytes, err := dockerAsyncJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker.async.js", size: 3900, mode: os.FileMode(420), modTime: time.Unix(1473532042, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _builderJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x1b\xcb\x72\xdb\xc8\xf1\xce\xaf\x00\x59\xc9\x12\xb0\x10\xc8\x9b\xa3\xb8\x3a\x78\xbd\x4e\x25\x87\xac\x53\xd9\x53\x4a\xc5\x52\x41\xe0\x50\xc2\x0a\x04\x10\x3c\x68\x2b\x32\xf3\xed\xe9\xee\x79\x60\x66\x30\x78\xe8\xe5\xa0\x5c\x22\x80\xe9\xe9\xe9\x77\xf7\x0c\xda\x8b\x63\x5c\x79\xd7\xde\xa5\x57\xb1\x7f\xb7\x69\xc5\xfc\x75\x9b\xef\x58\x55\x27\x45\xc5\xd6\x41\xb8\xf0\xe0\xda\x17\xd5\x21\x6e\x0c\x98\x26\xcd\xd6\x41\xc4\x07\x04\x50\x7d\xd0\x21\xe0\x51\x4e\xff\xa5\x48\xee\x59\xa5\x0f\xee\xe8\x4d\x14\xd7\x0f\x79\x02\x68\x38\x00\x07\xfe\x74\x64\x79\xf3\xe9\x90\x36\x8d\x39\x85\xe1\xfb\x1a\x80\x75\x80\xcd\x62\xb1\xd8\xb7\x79\xd2\xa4\x45\xee\xa5\xf5\xe7\x9b\xdf\x59\xd2\xf8\xc5\xcd\xef\x81\xf7\x48\xd8\x2a\xd6\xb4\x55\xee\xc1\x1b\xef\xf2\xf2\xd2\xd3\x00\x36\x8b\xd3\x82\x78\x67\x71\x72\xf7\x01\x09\x81\xd5\x14\x2e\x3f\x4b\xeb\x26\xf4\x92\x1b\x89\x08\x21\x53\x80\x78\x1f\x7a\x19\xfc\xe0\x70\x94\xb1\xfc\xb6\xb9\x0b\x61\x91\xba\xcd\x50\x3c\x57\x5b\x20\x48\x5b\x36\x67\x5f\x1b\x3f\x88\x9a\x3b\x96\xfb\x1d\x6a\x89\x52\x03\xe4\x18\x36\xf4\xfa\x14\x08\x24\x6a\x06\x47\xa3\xcd\x4a\xf7\x9e\x0f\xc4\x00\x19\x81\xc4\xf0\x8f\xaa\x38\xa4\x35\x8b\x00\x53\x91\x1d\x99\xcf\x31\x06\x1b\x7b\x25\x1b\x2e\xb9\x21\x56\xaf\xd2\xb3\xb3\x6d\xd0\x23\x15\x26\xe9\xeb\x72\x3c\x88\x38\x2a\xdb\xfa\x8e\x86\x37\xd6\xa8\xc6\xb8\x1a\x39\x09\xa8\x93\x12\xfa\xcf\x6d\x9a\xed\x48\xc1\xda\x6a\xd7\xd7\x75\x5b\xb2\x0a\x57\x34\x05\x20\xa0\xfd\x43\xb1\x6b\x33\x56\x87\x1e\xcb\x8f\xa1\xb7\x63\x37\xed\xad\x4e\x9e\x98\x1f\x25\x71\x96\xf9\xcd\x5d\x5a\x6b\xc4\xe1\x63\x24\xe6\xc3\xaa\xe2\xce\x1a\x07\xb4\x30\x86\x7f\xcf\xcf\xbf\x7d\x5b\xef\xc0\xe6\xb2\xa2\x3c\x80\xbd\xad\x3b\xc8\xf3\x73\x82\xad\x9b\xb8\x6a\xda\xd2\xb7\xd7\xd8\x49\x63\xcf\xd9\x17\x61\xf9\xfe\x23\x91\x7a\xb1\x5c\xd2\xaf\x92\x86\xc5\xe5\x2d\x6b\x3e\x56\x2c\x6e\xd8\xe7\x12\x9f\x6b\x64\x97\x58\xd5\x79\x44\xe1\x15\x2d\x1a\xdb\xe3\xc9\x78\xc9\xbe\x26\x59\xbb\x63\x68\x85\xeb\x3c\x3e\xb0\x75\xe8\xad\xcb\xa2\x6e\xaa\x36\xa7\xdb\x8a\x75\x77\x37\x28\x4f\x09\x20\x1f\x0c\x3d\xae\x15\xc8\x8e\x95\x0c\x02\x42\x9e\xa4\xac\xa6\x29\x77\x71\xcd\x04\x1e\x92\x81\xc4\xa3\x1e\xd2\x3c\x6d\xd2\x38\x4b\xff\xc3\xd6\x5b\xc3\x64\x81\x9f\x88\xa6\x2b\x0d\xeb\xa3\xcb\x0f\x55\x15\x3f\x44\x69\x4d\xbf\x81\xa7\xa0\x91\x25\xf5\xb0\xdd\xf4\x27\x2e\x97\xff\x55\xe3\x51\x0a\xc4\x7e\xfd\xbc\xf7\x51\x6e\xb6\xed\xe2\x55\xb3\x6c\x1f\x35\x55\x7a\x7b\x0b\x8a\x59\xe7\x45\x93\xee\xd3\x24\x46\x81\x03\xed\x79\x54\xdf\xa7\x65\x99\xe6\xb7\x21\xae\x6f\x19\xb7\x66\xe0\xa0\x02\x73\xac\x53\x46\x77\x07\xd1\xd1\xf3\x51\x37\xf7\xec\xc1\x4b\x73\xc2\x68\x73\x8e\xc3\xc7\x38\x6b\x19\x37\xca\x2b\x00\x75\xb0\x08\x6f\xaf\xde\x6f\xd1\xe3\x57\x7f\x58\xb9\xb8\x12\x40\x51\xdd\xde\x80\xca\xfd\x1f\x03\x0a\x77\x96\xed\xe8\x17\xb7\xa1\xeb\x08\x1c\x15\xd4\xeb\xc3\x63\xa8\xd6\x77\xb0\x7d\xf2\x58\x06\x9a\x70\x2f\x53\x56\x45\xc2\xea\x3a\x2a\xb3\xb8\xc1\x8c\xf0\x5a\x6b\x2e\x06\x28\x00\x7d\x0b\x6b\x57\xda\x06\x14\x41\x4f\xb6\x78\x25\x45\xde\xa4\x79\xcb\x36\x2e\x64\x6e\x39\xaa\x3c\x42\x7a\x09\xbc\x1f\x7e\xf0\x4c\xdb\x14\x03\x43\x6c\x4a\x75\xf6\xfc\x99\x06\xb8\x47\xbb\xb8\x1d\x20\xe6\x2f\x22\x3e\xa8\x55\xdd\x2c\x09\x01\x93\x30\x61\x71\x02\x9e\xb4\x50\xdb\x9a\xed\x90\x04\x21\xe3\xaf\x45\x71\xef\xdf\xc1\x9f\x50\xda\xaf\x4e\x5e\xf3\x50\xb2\x62\x4f\x5a\x44\x98\x2d\xd9\xc3\x5a\xce\x5f\x0f\xa6\x27\x35\x81\x07\x6b\x8a\x74\x88\x7e\x3a\x61\x99\xc1\x53\x19\x93\x48\x11\x11\xd8\x62\x53\x20\x55\xa1\x51\x49\xe8\xef\x35\x2b\xb9\x86\x35\x7f\x85\x60\x79\xa1\x58\xf6\x2d\x26\x35\x4a\x30\xc6\x60\x64\xf5\xce\xbc\xd5\x9f\x56\xf0\x57\xe6\x8c\x4e\xb0\x61\x87\x9a\x02\xe8\x85\xe7\x4e\xfb\xdc\x4c\x2a\x0a\x46\xa0\x2c\x44\xb4\xe9\x0d\x12\x86\x5a\x0c\xcb\xdc\x15\x1d\xe2\x52\x4b\x99\x75\xc3\xca\xa1\x78\xb0\xc4\xc1\x88\xb0\x28\x3d\xe4\x6d\x96\x0d\x06\x35\x84\xdf\x40\x7e\xbb\x8e\xca\x34\xb9\x27\xdc\x21\x64\x93\x2e\x5b\x38\x33\xc7\x36\x30\xcd\x0c\xaa\xc2\x34\x03\x91\xf7\xa9\xd4\xd7\xf1\x96\x97\x44\x0c\xc0\xf7\xc8\xb1\x78\x74\x68\xc4\x26\x1c\x63\xfa\x35\x91\xf3\x77\x12\x13\xb7\x2a\x7c\x3d\x14\xc7\xa9\xca\x5a\xb8\xd4\x2c\x0d\x0e\x31\x70\x15\x10\xa8\x4b\xc7\xfa\x92\xba\xaa\x1d\x14\x8f\x6a\x7b\x22\x27\xd1\x2a\x03\x39\x49\x19\x0a\xcf\x1f\x1c\xd6\x04\xe9\x65\x13\x01\x7f\xe9\x61\xa5\xbf\x4f\x73\xb6\x1b\xf4\xd3\xa0\x9f\x8b\x68\xb6\x28\x73\x40\xd3\x0c\x11\x91\x26\x21\x4e\xf2\xb1\xf4\x10\xdf\xaa\xd7\xa8\x77\xef\xa9\x59\x98\xf0\x4c\xa4\xe0\x1e\xa9\x56\x84\x77\x2a\x57\x06\x34\xdd\x96\x71\x95\xb1\x1a\xdd\x42\x41\xa4\x8b\x0d\x0c\xa1\xe8\x49\x84\x50\x72\x29\x7c\xfb\x26\xa3\x86\xc5\x88\xcb\xec\x2d\x1a\x20\x2a\x4f\xd8\x7d\xc7\x8d\x56\xc7\x21\x3b\xce\x49\xae\x35\x86\x16\x90\xd7\x4b\xf4\xe4\x20\xb8\x57\x36\x59\x22\xe9\xe7\x40\x4d\x4e\xba\xe7\x51\xb1\xa9\xbb\x5c\xdc\x36\xc5\xcf\x3c\xd4\x4d\x38\x9e\xcb\x2c\xd4\x1e\xd0\xd7\x63\x6d\x38\xee\xd2\x78\xf5\xca\x5a\x17\x63\xfd\xea\x56\x9b\x33\x52\xe8\x0e\x23\x73\x56\xbc\xa4\xab\xa1\xb2\x57\x09\xee\x65\xe5\xaf\x29\x37\xf7\xf8\x69\xa2\x92\xc3\x0b\xb5\x42\xb9\xf4\x52\xa5\x55\x27\x4c\xc9\x9d\x1c\xb3\xe0\x95\x73\x31\xdd\x1b\x41\x1a\x1f\xa1\x36\x8a\x21\xa2\x55\x3e\xf9\x5c\x38\x39\x27\xad\xff\xd9\xe6\x39\x70\x3c\x77\x02\x2c\xf2\x37\xf4\x6c\x0e\xdf\x03\x77\xa9\xcd\x91\x58\x24\x5f\x6e\x4f\x9d\xb1\x0d\xd7\xaf\x67\x2b\x1b\x9d\x48\x29\x7b\x10\x0b\x5a\x1c\x50\x70\xf5\x23\x6d\x40\x60\x43\x39\x68\xe8\xce\x75\x57\xfa\xba\x2b\x5c\x37\xce\xa0\x2c\xde\x3d\xfc\x86\xcb\x33\x19\x3e\x66\xc5\x8f\x7d\x0c\x65\xfb\x48\x04\xe9\xf6\x08\x48\xf0\x7b\x83\xe0\x39\xf8\xf5\xf4\x20\xf7\xb3\xa3\xb2\x91\xd7\x53\xe3\xaa\xbc\x66\x01\x39\x12\x0f\x11\xe7\x0f\xe4\x16\xd7\xe5\xc8\x37\xaf\xc5\x83\x20\x0f\xe5\xfc\x22\x3a\x2c\xed\xfd\x79\x8b\x35\x22\x62\xc5\xca\x42\xc5\xf7\xb9\x36\x38\xb7\x34\x7c\x6b\xb1\x3c\xdb\xa4\x4e\xb3\x8a\x12\xd7\x45\x67\x44\x7c\xcf\xe9\xda\x86\xd2\x66\x4b\x25\x8b\x69\x95\x69\xcc\xe8\x26\x98\x10\x52\x0a\x83\x46\xc1\xc3\x5f\x88\xf5\xe7\xb0\x79\xfe\xee\x3b\x59\xde\xbb\xf3\x29\xdb\x1b\x5f\xf6\x15\xe5\xfa\xff\x8a\x37\x6f\xa7\xc7\x97\x52\x66\x51\x38\x4f\xa7\xf2\x9a\x11\xdd\xb0\xba\x1c\x1c\x73\xd7\x31\x3d\x07\xac\x79\xc6\x1a\x63\x09\xa3\xd7\x0c\x30\xbc\xe6\x64\x67\xf6\x94\xea\xda\xd8\x0e\xcc\x32\xa7\x21\xc6\xad\x22\xa6\x2f\x09\xfe\x15\xa0\x1e\xd9\x26\x09\x88\xc1\x5d\x8f\x59\xcd\x17\xe5\xb3\x8f\x4a\x46\x4b\x78\xd8\x1d\x1e\x59\x55\xc3\xee\x70\xa2\x98\x9f\xb3\xdb\xeb\x6a\x45\x95\x78\xa7\x37\x71\xf7\xa3\xbb\x02\x1c\x96\xb5\xf4\x70\xe9\x39\x66\x24\x85\x51\xaf\xcf\xdb\x2d\x62\xb0\x29\xca\x31\xe3\x78\x8a\x17\x3b\xcb\x93\xa2\x9c\xaa\x4e\x4e\xce\x53\x99\xb9\x0b\xcf\x91\xcb\xb8\xf3\xb8\x9d\x46\x89\xc5\x45\xdc\x94\x57\x0c\x7e\x6f\xe8\x59\xa3\xed\x16\x50\x95\x34\xc9\x9d\x86\xca\x59\xdf\xcc\xc1\xa5\xb1\xd6\x9d\x90\xd0\x71\xf6\xc8\x11\x84\xee\x8c\x15\x3b\x14\x47\xe3\x38\x8b\xbf\xa1\x5d\x4f\xcf\xe3\x5f\xb0\xbd\x9e\xed\x9b\x72\x1d\x71\x58\xab\xed\x19\xdd\xdb\x35\x4a\x60\x1a\xa4\x75\x12\x33\x7c\xfe\x39\xb4\x97\x9c\xef\xee\x30\xed\x99\x16\x4b\x42\x1e\xdf\x8c\x61\xc4\x18\x59\x40\xe3\x44\x1a\xf5\x0a\x3f\xfb\x91\xf6\x56\xaf\x7c\x30\xe4\x10\x19\x5f\xc8\x17\x5a\x72\x39\x87\x9c\x05\x4c\x6c\x9c\xfe\x2f\xaf\x81\x7c\x3e\x59\xa5\xbd\xc2\xe9\x86\x3b\x25\x8e\xef\x3f\xfb\x91\x60\x44\x4d\x74\xac\x01\x96\x39\x7e\x7e\x29\xaf\x19\x3a\x7f\xb9\x61\xe1\x85\x24\x19\xb1\x90\xab\x73\x30\x1a\x12\xdf\xc3\x47\x54\x63\x31\x43\xbf\x84\x60\xcb\x11\x6b\x71\x9e\xbe\x28\x1f\x0f\x86\x2d\x69\x54\x95\x63\x2b\x72\x35\xbb\xac\xf0\x49\x9a\x7e\x3d\xdd\x11\xb7\x13\x0a\x1c\x74\x7d\x9a\xfc\x3d\xfc\xff\x90\x6a\x6a\x79\x0b\xf7\x7f\x6b\xd7\x54\x0a\x7b\xa1\xc6\xd8\xee\x19\x0a\xd3\x9c\x8e\x66\x4f\x78\x5e\x9f\x51\xfb\xd5\x9b\x15\x2b\x5d\xd9\x20\x0e\xec\xd5\x86\xe1\xfc\xdd\xbe\x3e\xc8\x1d\x65\x87\x1e\xb6\x22\xb0\x5b\xbe\xf0\xfa\x1f\x69\x15\x08\x6f\xef\xba\xb0\x4e\x79\x1f\xe9\x90\xf8\xc2\x5b\x89\x6e\x1b\xb0\xe2\x3d\x84\xcd\x0b\x0f\x04\x9f\xa3\x84\x9a\xe2\x42\xf6\xaa\x60\x11\xe3\x9c\x4b\xc3\x6a\xe6\x8a\xce\x1e\x57\x7c\xea\x4a\x7e\x5a\x5b\x0d\x4c\x5e\xcb\x6d\x14\x9f\x2c\x3e\x86\xc2\x04\xfc\x06\x2a\x8b\xef\xf5\x56\x10\x22\x0f\x54\xd7\xc3\xd8\xa8\xbe\x14\x3c\x28\x70\x35\x5d\xe0\xeb\xb4\xbb\xed\x10\xe1\xb9\xd5\x4d\x9c\xdc\x83\x90\x4c\xc5\x15\x79\xef\x5b\x33\x49\x93\xaf\x83\xb8\x9d\xc7\x9f\xd2\x6f\x40\x61\x1f\x7e\xfb\xd7\xaf\x1f\x2d\x2d\x87\x0b\x6b\x91\xde\x27\x97\xb7\x59\xc4\xdc\x09\x3e\x67\x0d\xab\x4a\x5f\x98\x77\x74\x0c\xb4\xd0\xe6\x09\xa3\x5c\x2c\x4e\x81\xaf\xb7\x0c\x04\x56\x73\xa1\xea\xc3\x88\xad\xe6\xc2\x18\xcf\x27\x45\x23\x44\x6c\x35\x40\x50\xc3\xdb\x82\x7d\x2d\x8b\xaa\xa9\x85\x63\x74\xbd\x6f\xda\xe7\x2b\x57\x4f\x9b\xd5\xff\x11\x1b\x1f\x76\x60\x25\x2f\xb6\xba\x21\xa8\xd7\x28\x2f\xbe\xe4\xd7\x5d\xa7\xdb\xe3\xc9\xec\x49\xb4\xcb\x8e\xb8\x73\xe7\xde\xde\x55\x9c\xfd\x58\xf6\xa6\xf5\x7d\x08\x88\xa8\x6b\xf9\xea\x35\x80\x0c\x1e\x10\xd8\x84\xf4\x71\x29\x02\xa6\xeb\x6e\x2d\xbb\xc8\x13\x3a\x2b\x20\x9e\x5c\x1b\x13\x01\xdb\x59\xe5\x69\x96\x34\x0c\x54\x65\x0c\x41\x92\x9f\x2d\x4b\x98\xd0\xd4\x42\xd0\x6f\xf9\xe2\xad\x50\x57\x8e\x56\x2f\x29\x06\xbd\xef\x4e\x36\x4b\xb8\xa5\x49\xe2\xfb\x45\x03\x77\xe2\xb0\x68\x0a\x91\x04\x3b\xb2\x0f\x9f\x88\x00\x30\x6f\xf9\x94\x52\xd8\xf4\x79\x52\xfd\x2a\x08\xfc\x86\x6d\x2a\xdf\xb9\x3d\xc5\xbd\xa5\xc5\xee\x4e\xd9\x96\x4a\x8d\x6c\x9a\xfb\x6a\x33\x4e\x5d\x9f\x71\x8e\xad\xa5\x22\x10\xe8\x65\x03\x39\x29\x4d\x90\xf9\xc0\x48\x0d\x62\x84\x67\x06\x3d\x49\x68\x23\x6c\x27\x07\xd8\x4e\xbd\xa7\xd3\x43\x89\x4a\xbd\x37\xbf\xbd\xc1\xb0\x78\x61\x42\xd1\xd3\xa7\xaa\x2a\x2a\x85\x00\x1f\xc4\xa8\xcc\x81\x32\xf5\x76\xd4\x88\x44\x24\x75\xd2\xbd\x93\xb8\x6e\xb8\xc8\x3a\x5c\x72\x4b\x86\x39\x5e\xdc\xae\x42\x11\xaf\x78\xed\x4b\x29\x9b\xdf\xea\x23\x48\xfc\x4a\xdc\x59\x33\xa8\x7c\x82\xc5\x8c\xe7\xb5\x31\x57\x80\xac\xf4\xc7\x15\x6a\x4a\x59\xc5\x0c\xb7\xd6\x5a\xc3\xc5\xb7\x6c\xe9\x78\xfc\x98\x41\x05\xf1\xa5\x31\xef\x0a\x47\xb7\xba\x3b\x38\x86\x3b\x64\x22\xc2\x77\x1f\xc7\x78\x77\x62\x74\xcf\x1e\x6a\xdf\x85\x58\xf4\xa5\x7b\x3f\x79\x3a\xa4\x74\x5c\x31\xfa\xd4\xe5\x15\x2f\xae\xd8\x62\x37\x28\xc3\x58\xad\x49\x43\x07\x55\x70\xaa\x39\x56\x74\xd5\xa7\xf8\x8b\x13\x05\x81\x1b\x18\xf8\x09\xde\xc2\xef\xd9\x99\xeb\xd4\x09\xe8\x15\x33\xae\xd2\xed\x60\x44\xa6\x8f\x32\x56\x34\x56\xce\x29\x58\x3b\xe9\x89\xde\x15\x4f\x27\xe3\xa8\x66\x09\xfb\xb4\xaa\x31\xb6\x77\x1f\x30\x86\x38\x55\x28\xa7\x38\x36\xb8\x55\xb3\x80\xeb\x2e\x44\xf2\x61\x53\x91\xf2\xd4\x4a\x03\xd3\x94\x83\xa3\x3a\x3a\x2d\x68\x11\x1b\x45\x9b\xef\xa8\x5b\x77\x9f\xca\x5e\xdd\x2e\x62\xf6\xda\x8a\x45\x54\x3c\xf2\x06\xc9\xcb\xee\x84\xce\x48\xad\xea\x1e\x0d\x89\xaf\xa0\x32\x5b\xd7\xd5\x6a\x40\x2d\x91\x5c\x97\xfa\x9f\x48\xe0\x4c\x22\x6d\x42\x15\x19\xb4\x5c\xd0\xe5\xc1\x01\x51\x5b\x19\xb5\xdf\xaa\x7b\x32\xc5\x5c\x03\x7b\x1d\x13\xc8\xeb\x28\x17\x64\x09\x1d\xbc\x65\x89\xda\xc4\x51\xfe\x3b\x01\x1c\xfb\x9d\x37\x56\xd9\x44\x0d\x4e\x58\xe0\x1e\x06\x3d\xde\x42\xbf\x5c\x0a\xea\x0e\x56\xfd\xa1\x93\x37\xd8\x97\xae\x68\xec\x6b\x69\x6a\xcb\xeb\xac\xf0\xac\x63\x01\xdb\x08\x51\xfe\x36\x29\xcd\x5d\x55\x7c\xa1\x04\x4f\x59\xcb\xe7\xff\xc9\xc9\x5f\x27\x69\x95\x64\x0c\xfd\xe7\xc2\xfb\x63\xed\xc5\x60\x7e\xf0\xc3\x79\xac\x61\xef\x42\xc7\xdc\x05\x54\x8d\x90\xdb\x48\xb1\x51\xf7\x4d\x95\x4e\x8f\x03\x97\x15\x0c\xc4\x1b\x77\x9c\xf9\xde\x3e\xda\x33\x7b\xed\x2b\x13\xf0\x00\xff\xfe\x17\x00\x00\xff\xff\xdd\x2b\xcd\x49\x3f\x36\x00\x00")

func builderJsBytes() ([]byte, error) {
	return bindataRead(
		_builderJs,
		"builder.js",
	)
}

func builderJs() (*asset, error) {
	bytes, err := builderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "builder.js", size: 13887, mode: os.FileMode(420), modTime: time.Unix(1473532797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker.async.js": dockerAsyncJs,
	"builder.js": builderJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"builder.js": &bintree{builderJs, map[string]*bintree{}},
	"docker.async.js": &bintree{dockerAsyncJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

