// Code generated by go-bindata.
// sources:
// docker.js
// docker.async.js
// builder.js
// DO NOT EDIT!

package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xcd\x8e\xdb\x36\x10\x3e\x5b\x4f\x31\xbb\x40\x20\xaa\x6b\xf1\x01\x2a\x18\x45\xd1\x1f\x20\x3d\x34\x45\x7a\xdc\xf8\xc0\xc8\xb4\xcd\x84\x22\x55\x92\x72\x77\xb1\x71\x9f\xbd\x33\xd4\x1f\xb5\x76\x80\x2d\x1a\xb4\x97\xf8\x60\xc9\x9c\x99\x6f\xbe\x19\x7e\x43\xfa\x24\x1c\xf8\x23\x6c\xc0\xc9\x3f\x3a\xe5\x24\xcb\xfd\x31\x2f\xd6\xd9\x6a\x6f\x5d\x23\x42\x6a\xe8\x82\xd2\x79\xc1\x7b\x43\x96\xc5\x48\xad\x6a\x89\x3e\xdf\x3b\x27\x1e\x79\xeb\x6c\xb0\xe1\xb1\x95\x3c\xae\x57\x59\x96\xed\x3b\x53\x07\x65\x0d\xfc\x68\xeb\x8f\xd2\xb1\x02\x9e\xb2\xec\x9c\x65\xf2\xa1\xb5\x2e\x78\xde\x2f\x23\x42\xff\x52\x25\x11\xb5\xd0\x9a\xd5\xcd\x6e\x0d\xc2\x1d\x3c\x05\xae\x62\x4a\x74\xbe\xdd\xf5\x61\xb7\x70\x07\xe8\x51\x65\x2b\xb5\x07\x36\xb9\xad\x3c\xdc\x8d\x9c\x94\x8f\xcf\xc1\xf8\x5d\xc4\xe2\x1f\xac\x32\x2c\x87\xbc\x80\x6f\xe3\x02\x02\x20\xa7\x95\x93\xa1\x73\x06\xdb\xc1\xe5\x83\xac\x99\x2f\xb8\x0f\x3b\xdb\x05\x22\x4c\xa9\x63\x7d\x13\xd7\xb9\xdc\xde\xda\x74\x3a\xa8\xdf\x9c\x6d\x89\xe1\x7d\x2e\xcd\x29\x5f\x03\x3d\x7e\x56\x5a\xd2\x6b\xdb\xbd\xd7\x0a\xbb\x8b\xaf\x27\xab\xbb\xc6\xc8\x7c\x9b\x65\x11\x85\xd7\x4e\x8a\x40\x9d\x9c\xca\x67\x46\x34\x72\x0d\xaa\x11\x07\x7c\xd8\x96\x16\xfb\xf2\x86\x77\x74\x1e\xdf\x3e\x7d\x82\xa7\x33\xf6\x0e\xf0\x43\x54\xf6\x5a\x1c\x22\x8b\x6d\x5c\xc2\x1d\x03\x46\xeb\x1f\xe5\x23\x28\x93\x82\xc1\xf0\x21\xeb\x49\xe8\x19\xf3\x1e\x7d\xb7\xd5\x64\xa7\xfe\xde\xdc\xfc\x35\xd7\xc8\x95\xd9\xc9\x87\x37\x7b\x86\x7e\x45\x8a\x34\x7a\x4f\x95\xc3\x66\x43\x89\x8b\x98\x7d\x13\x3b\x52\xee\xc9\x70\x11\x72\xb3\xdc\x32\xe4\x73\x81\xdc\x73\x25\x9e\xf7\xf8\xd8\x2e\x6c\xe7\xec\xd2\x0b\xbf\x79\x23\x5a\x36\xb7\xf5\x84\x90\x30\xec\x74\x5e\x96\x39\x4a\x88\x88\xdd\x01\xea\x01\xbf\x4f\x15\x9c\x8b\x6a\x81\x14\xbb\xc9\xdb\xce\x1f\x89\xd2\x2c\x9e\xc4\xed\x0c\x52\x7b\xf9\x8c\x6b\x12\x77\x2d\x11\x56\x97\x00\x64\xfd\xee\x9d\xb3\x15\x0a\x9a\x74\x10\xa7\x8c\xe5\x83\xd2\x5d\x67\xa0\xdc\xc1\x2b\x0f\x65\x49\xc2\xa0\xb7\x57\x1e\xa5\xd4\x27\x99\x38\xf1\xe0\x54\xc3\x8a\x35\x24\xea\xc1\x34\xcf\xa5\x8d\x39\x46\x71\x0f\x11\x15\x89\xbc\xd7\xa2\x0f\xc2\x85\x17\x49\x91\x18\xff\x5f\x6a\x8c\x6a\xda\xcc\x03\x46\x69\x93\xb5\xc5\xef\x71\xf2\xbe\xea\xf4\x0b\xe8\x74\x90\x29\xed\xd1\x7c\xf6\xde\x84\xa3\xf2\xfc\x28\xfc\x0f\xd6\x04\xa1\x0c\x1e\xf5\x24\x9a\xa2\x3f\x8f\xff\x95\xa4\x2f\xb4\x3c\x14\x41\x69\x63\x56\xe5\xdf\x76\xc6\x28\x73\x48\x53\x3e\x13\xfc\x98\x54\x19\xdf\xca\x3a\x40\xb9\x87\xa7\x27\xfe\x7a\x77\x3e\xc7\x22\x63\xe0\x72\x20\xa6\x3c\x73\x01\xe3\xb5\xd3\x0f\xc8\xed\x10\x57\xd1\x85\x93\xcc\x55\x35\xf9\xbf\x20\x29\x5d\x3c\xab\x1a\x15\x6e\xb5\xe4\xda\x1e\x58\xee\xfa\x5a\x60\x88\xc5\x7e\x10\xe8\x3f\x9d\x60\xdb\x2e\x06\x38\xf6\x64\x40\x88\xf7\x6a\x4e\x2e\x88\x1d\x2f\x6a\x1e\x97\xf0\x22\xec\x1a\x69\x82\x2f\x52\x28\xd7\x5c\x9c\x04\x97\x60\xe8\x54\xee\x11\xed\x9e\xcc\xdb\x65\xb8\x7a\x51\xbc\xba\x1a\xfd\xbe\x53\x7a\xb7\x88\x6f\x45\x38\xae\x21\x88\xc3\x25\x48\x74\x26\x18\x14\x31\x3a\xe4\xd1\x6d\x0d\x14\xb1\x00\x9d\xe4\x72\x9d\x18\xe9\xda\x49\x32\x1a\xf9\x27\xbc\x95\x87\x9f\x1e\x5a\x96\xbf\x7b\xe7\xbf\x61\xe3\xa6\xd1\x6c\x14\xb8\x72\x97\xcf\xfb\x82\x21\x3c\x48\x1f\xd8\xb8\x41\xa3\x58\x5a\x7f\x3b\x6e\x54\x31\x93\x48\x27\xe5\xbf\xe2\x01\xa5\xf8\x0c\x95\xd7\x34\x5a\x5f\x86\x06\xf9\xdb\xf8\xaf\xf1\x33\x3c\xe2\x18\xa7\x3d\x19\x99\xdb\x74\x8f\x86\x89\xb9\x4a\x29\xb8\xc7\x38\x94\x94\xea\x83\x47\xd3\x66\x50\xc0\x10\x95\x4a\x69\x3a\x08\x7e\xf9\xfd\xcd\xaf\xbc\x15\xce\x4b\x46\x31\xfd\x39\x52\x8b\x50\x1f\x81\xc9\xf4\xf4\x4e\x87\x51\x16\x33\x80\xe9\xb4\x8e\xff\x13\x91\xe4\xdf\x01\x00\x00\xff\xff\xb4\xfe\x66\xa4\x35\x0b\x00\x00")

func dockerJsBytes() ([]byte, error) {
	return bindataRead(
		_dockerJs,
		"docker.js",
	)
}

func dockerJs() (*asset, error) {
	bytes, err := dockerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker.js", size: 2869, mode: os.FileMode(420), modTime: time.Unix(1473459463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerAsyncJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x4b\x8f\xdb\x36\x10\x3e\x4b\xbf\x82\x16\x10\x90\x5a\x5b\xf2\x3d\x86\x51\x14\x7d\x00\xe9\xa1\x29\xd2\xa3\x63\x2c\x18\x9b\xb6\x99\x48\x94\x4a\x52\xee\x2e\x36\xee\x6f\xef\x0c\x49\xbd\x2c\xa3\x9b\x62\xb7\xb7\xfa\x20\xc9\xe4\xcc\x37\x0f\x7e\x1f\xc9\x33\xd7\xc4\x9c\xc8\x9a\x68\xf1\x47\x23\xb5\x60\xd4\x9c\x68\xba\x88\xa3\x43\xa5\x4b\x6e\x87\x13\x8d\x95\x05\x4d\x73\x3f\x11\xc7\xce\xb3\x90\x3b\x01\x36\xdf\x6b\xcd\x1f\xf3\x5a\x57\xb6\xb2\x8f\xb5\xc8\xdd\xf8\x2a\x8e\xe3\x43\xa3\x76\x56\x56\x8a\xfc\x58\xed\xbe\x08\xcd\x52\xf2\x14\xc7\x97\x38\x16\x0f\x75\xa5\xad\xc9\xfd\x30\x20\xf8\x8f\xd5\xc0\x63\xc7\x8b\x82\xed\xca\xfd\x82\x70\x7d\x34\xe8\x18\xb9\x90\x60\x9c\xec\xbd\x5b\x42\xe6\x04\x2c\x72\xab\x65\xc9\xd2\x38\x92\x07\xc2\x3a\xe3\xc8\x90\x39\x98\x3a\x23\xe6\x13\x94\xc6\xbd\x83\xcd\x77\x0e\x38\xff\x5c\x49\xc5\x28\xa1\x29\x79\xeb\x23\xad\xe2\xe8\x12\x47\x18\xc7\x04\x64\x18\x59\x2e\xdb\xe0\xbe\x7e\x46\xdf\x18\xf2\xc6\xd0\x05\xe9\x52\xec\x91\x20\x95\x38\xd2\xc2\x36\x5a\x11\x25\xfe\x24\xbf\xe9\xaa\x94\x46\xb0\xae\x36\xa6\x85\xa9\x8a\xb3\x58\x40\x77\x3f\x8b\x9d\xf5\x09\x2f\x97\xbb\x4a\xc1\xb8\xc8\x8b\xea\xc8\x28\x36\xe0\x2d\x04\x30\x00\x17\x95\xd5\xbe\x81\x89\xfb\xfb\x5a\xcb\x33\xb7\xe2\xde\xb7\x80\x99\x05\xe9\x51\x85\xd6\x88\x68\x9a\x22\x20\xba\x8e\xc0\x68\x4a\x42\x36\x3e\x9c\x1b\x5a\xe1\x7c\xc8\x83\x05\x27\x1c\xbb\xb8\x06\xe0\x03\x17\x0a\xab\x76\xeb\xda\xad\x51\xbf\xcc\x7e\xb6\x04\x47\x09\x15\xd6\xd8\x9c\x0d\x15\xea\x0c\x39\xe3\xeb\x67\x59\x08\xfc\xac\x9b\x4f\x85\x04\x56\xc1\xe7\xb9\x2a\x9a\x52\x09\xba\x05\x6a\x38\x98\x7c\xa7\x05\x54\x83\x6d\xed\xaa\x50\xbc\x84\xc6\xc8\x92\x1f\xe1\x55\xd5\x38\xe8\x57\x34\x7c\x83\x71\xfb\xf5\xf5\x2b\x79\xba\x00\x69\x08\xfc\x30\x97\x43\xc1\x8f\x2e\x8d\xad\x1b\x82\xa5\x22\x0c\xc7\xbf\x88\x47\x22\xd5\x08\x2c\x72\x16\xad\xe3\x99\x17\x3d\xec\x06\xcc\xb7\xab\x6e\x1e\x7b\x38\x9b\xfd\xd5\xd7\x99\x4b\xb5\x17\x0f\xef\x0f\x0c\xec\x52\x04\x23\x83\x1f\x5a\x77\xd5\x93\xf5\x1a\x63\xa7\x2e\x81\xb5\xeb\x4a\x76\xc0\x89\x89\xcb\x6c\xcc\x50\xc8\x67\x82\xec\x73\xc5\x3c\x37\xf0\xda\x8e\xe6\x2e\xf1\xd4\x0a\x9e\x79\xc9\xeb\x01\xeb\xce\x00\xd9\x32\x81\x66\x19\x05\x65\x60\x62\x73\x02\xa4\x85\xe7\x79\x45\x70\xdd\x87\x48\xae\xa1\x79\xdd\x98\x13\xa6\x34\x60\x78\x6f\x76\x21\xa2\x30\xe2\x2a\xd7\x81\xdf\xad\x40\x50\xdd\x00\x20\xf6\xcf\xc8\x0b\x1c\xa5\x84\x1a\x4f\x56\x5e\xd0\x1e\xaa\x10\xea\x68\x4f\x7e\xe5\x82\x45\x10\x62\x02\x42\x4c\x16\x21\xe2\x30\x41\x54\xb1\x33\x9d\xf7\xa2\xcd\xf6\x24\xcb\x90\x60\xa4\x95\xef\x80\x6d\xe8\x13\xba\xe3\x36\x9f\x44\x37\x2a\x09\xdb\x0f\x6a\xc1\x33\xd6\x58\xae\xed\x84\xb0\x2e\xb3\x91\xb3\xb3\x4b\x7c\x00\x40\xbe\xc4\xcb\xbb\x7f\x02\xb8\xc5\x78\xec\xcb\x6b\x92\xfe\xdf\x30\xde\x31\x76\xdd\x0b\x19\xc3\x0e\xc6\x46\xff\x5b\x85\xff\xaf\x85\x97\x6b\x21\x88\xc1\x6b\xa1\x3b\x5b\x82\x16\x66\xf6\x24\x4d\x7e\xe2\xe6\x87\x4a\x59\x2e\x15\x1c\x00\x8e\x5e\x5e\x17\x60\x8d\xc2\x41\xd6\x4e\x54\x82\xcc\x07\xca\x5f\x91\xff\x4a\x34\x13\x35\x84\x7a\x30\xb4\x8b\x2c\xcd\x87\x46\x29\xa9\x8e\x37\xc2\x4a\x65\x6a\x38\x5b\x06\xa1\xbb\x39\x73\xca\xc5\x83\xd8\x31\x1a\xce\xed\x60\x4a\xb2\x03\x79\x7a\xca\xdf\xed\x2f\x17\xd7\x0a\x87\x09\xf2\xd8\x57\x8d\xed\xce\xf4\xae\xa5\x5d\xa0\x00\xe2\x65\x94\x04\x3f\x3c\xb9\xda\x30\x60\xe7\x4e\x32\x6f\xff\x0d\x41\xdd\x56\x11\xb8\x30\x04\x19\xe7\x02\x1a\xbe\x5b\xf6\xbb\x40\x55\x8f\x34\x3c\xd9\x00\x28\x9a\xe0\xf1\x8d\x77\xa1\xdc\x0d\x41\x5f\x9a\x52\x28\x6b\x52\xb7\x21\x04\x28\x5d\x3e\xbf\x9b\x50\x30\xca\x0e\x80\xb6\xc1\xe9\xed\xd8\x5d\x7e\x93\xbf\xbc\xe9\xfd\xa9\x91\xc5\x7e\xe4\x5f\x73\x7b\x5a\x10\xcb\x8f\x53\x10\x67\x8c\x30\xc0\x63\x30\xa0\xce\x6c\x41\xd0\x63\x04\xda\xd1\xe4\x76\x62\xc8\x6c\x2d\x70\x12\x2f\x47\x1f\xc4\xf1\xa7\x87\x9a\xd1\x8f\x1f\xcd\x1d\x6b\x57\x04\xe5\x91\xc2\xc8\x9c\xa6\x57\x39\xd4\x06\xee\xa0\xf6\x24\xd4\x40\xcb\xb0\x46\x9e\x8a\xdd\x2d\xe7\x98\x5b\x61\xac\x9b\x08\xb7\x99\x2e\xb9\xa1\x7a\xfe\x9b\xfc\xe0\xa2\x93\xf1\x17\x66\x09\xfb\xe9\xf8\x8c\x00\xf0\xe9\x19\x53\x1b\x38\x60\x66\x33\xf8\x86\xdb\xec\x26\xc9\x78\xb2\x85\x5b\xec\x66\x7b\x55\xef\x3b\xd4\xf3\xeb\xd4\x7a\x55\xad\xdb\x29\x5e\xba\x22\xad\x32\x9f\x67\x71\xb0\x0c\xc7\x36\xa4\xf3\x5c\xdc\x5f\x7e\x7f\xff\x6b\x5e\x73\x0d\x97\xef\x2e\x32\x06\xfe\x3b\x00\x00\xff\xff\x49\x05\x60\x83\xf7\x0c\x00\x00")

func dockerAsyncJsBytes() ([]byte, error) {
	return bindataRead(
		_dockerAsyncJs,
		"docker.async.js",
	)
}

func dockerAsyncJs() (*asset, error) {
	bytes, err := dockerAsyncJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker.async.js", size: 3319, mode: os.FileMode(420), modTime: time.Unix(1473459499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _builderJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x1a\x4d\x6f\xe3\xb8\xf5\xee\x5f\x41\x1b\xed\x4a\xda\x11\x94\x6c\x0f\x3d\xc4\x9b\xc3\xec\xec\x14\xe8\xa1\x9d\xa2\xdb\x4b\x11\x18\x81\x22\xd3\x89\x36\xb2\xa4\x8a\x52\x66\x82\xc0\xfd\xed\x7d\xef\xf1\x43\x14\x49\xd9\x4e\x3a\xbb\xfd\x10\x06\x13\x5b\x7c\xdf\x5f\x7c\x7c\xf4\xe2\x29\xef\xd8\x2d\xbb\x66\x1d\xff\xc7\x50\x76\x3c\x8e\x86\x7a\xcb\x3b\x51\x34\x1d\x8f\x92\x74\xc1\xe0\xd9\x35\xdd\x3e\xef\x27\x30\x7d\x59\x45\x49\x26\x17\x14\x90\xd8\xdb\x10\xf0\x55\xa3\xff\xd8\x14\x8f\xbc\xb3\x17\xb7\xf4\x26\xcb\xc5\x73\x5d\x00\x19\x09\x20\x81\x3f\x3e\xf1\xba\xff\xb8\x2f\xfb\x7e\x8a\xc2\xf1\xbd\x00\x60\x1b\x60\xbd\x58\x2c\x76\x43\x5d\xf4\x65\x53\xb3\x52\x7c\xba\xfb\x99\x17\x7d\xdc\xdc\xfd\x9c\xb0\x17\xa2\xd6\xf1\x7e\xe8\x6a\x06\x6f\xd8\xf5\xf5\x35\xb3\x00\xd6\x8b\xc3\x82\x74\xe7\x79\xf1\xf0\x1e\x05\x01\x6e\x86\x56\x5c\x95\xa2\x4f\x59\x71\xa7\x09\x21\x64\x09\x10\x97\x29\xab\xe0\x0f\x2e\x67\x15\xaf\xef\xfb\x87\x14\x98\x88\xa1\x42\xf3\xdc\x6c\x40\x20\x8b\x6d\xcd\xbf\xf4\x71\x92\xf5\x0f\xbc\x8e\x47\xd2\x9a\xa4\x05\x28\x29\xac\xe9\xf5\x21\x51\x44\x0c\x86\x24\x63\x61\x95\x3b\x16\x83\x30\x20\x46\xa2\x29\xfc\xa5\x6b\xf6\xa5\xe0\x19\x50\x6a\xaa\x27\x1e\x4b\x8a\xc9\xda\xe5\xe4\xc2\x15\x77\xa4\xea\x4d\xf9\xee\xdd\x26\xf1\x44\x05\x24\x9b\xaf\xa4\x83\x84\xb3\x76\x10\x0f\xb4\xbc\x76\x56\x2d\xc5\xcd\xca\x41\x41\x1d\x8c\xd1\x7f\x18\xca\x6a\x4b\x0e\xb6\xb8\xdd\xde\x8a\xa1\xe5\x1d\x72\x9c\x1a\x40\x41\xc7\xfb\x66\x3b\x54\x5c\xa4\x8c\xd7\x4f\xb6\x5c\x0a\x31\x2b\xf2\xaa\x8a\xfb\x87\x52\x58\x52\xe1\xd7\x4c\x21\x02\x3b\xf5\xc9\x59\x07\x7a\xb0\x16\x6d\x21\xc8\xaa\xa6\xdd\x43\x80\x45\x23\xc4\xc5\x05\xc1\x88\x3e\xef\xfa\xa1\x8d\x5d\xda\x5b\x1d\xdd\x35\xff\xac\x42\x5d\xc3\x1c\x1c\x3d\xee\x79\xff\xa1\xe3\x79\xcf\x3f\xb5\xf8\x5d\xa0\x42\x9e\x32\x68\x9e\x66\xc0\x70\x7a\x39\x4c\x5e\xf2\x2f\x45\x35\x6c\x39\xc6\x59\x54\xe7\x7b\x1e\xa5\x2c\x6a\x1b\xd1\x77\x43\x4d\x1f\x3b\x3e\x7e\xba\x43\x8b\x69\x00\xf3\xc5\x7c\xd8\xf2\x96\x43\x96\xd7\x45\xc9\x05\x41\x3d\xe4\x82\x47\x9b\x49\x80\x81\x6c\x19\xbd\x77\x23\x60\xf2\x05\x21\x97\xef\xbb\x2e\x7f\xce\x4a\x41\x7f\x13\x66\x30\x51\x54\xf3\x65\xb3\xf6\x11\x97\xcb\x7f\x9a\xf5\xac\x04\x89\xbe\x7c\xda\xc5\x68\x0f\x97\x27\x3e\x82\x57\xbb\xac\xef\xca\xfb\x7b\xb0\x70\x54\x37\x7d\xb9\x2b\x8b\x1c\x0d\x09\x2a\xd4\x99\x78\x2c\xdb\xb6\xac\xef\x53\xe4\xef\x84\xa5\x15\x9a\x60\xda\xe9\xda\x68\xe4\xf1\x13\xd4\x35\x16\xa3\xcd\x1f\xf9\x33\x2b\x6b\xa2\x78\xcc\x0a\x08\xfa\x94\x57\x03\x97\x11\x76\x03\x68\x01\x75\xe1\xed\xcd\xe5\x06\xf3\x76\xf5\x9b\x55\x48\x43\x05\x94\x89\xe1\x0e\xdc\x1a\x7f\x97\x50\xd1\x72\xe2\xc3\x7e\x64\x9c\xdc\x66\x90\x6e\xe0\xcf\x18\xbe\xa6\x86\x7f\xc0\x04\x07\xc6\x2b\xf0\x4a\x98\x4d\xdb\x35\x05\x17\x22\x6b\xab\xbc\xc7\xba\xfe\xb5\x78\x2e\x66\x24\x00\xdf\xab\x88\x36\x9e\x07\x12\x41\xcf\x7b\x2f\x8a\xa6\xee\xcb\x7a\xe0\xeb\x10\xf1\xb0\x5d\xcd\xee\x40\x7e\x4a\xd8\x37\xdf\xb0\x69\xdc\xaa\x85\x39\xb5\xb5\x7b\xbd\x1c\xa6\x05\x99\xc5\x21\xed\x67\x84\xf9\x83\xaa\x09\x86\x6b\x58\x25\x7c\xc0\xc2\x64\x5c\x60\x4e\xc0\x27\xa3\xd7\x8d\x74\x25\x84\x71\x99\x2a\xa7\x19\x78\xbc\x6f\xfa\xe7\x16\xa4\xb7\x37\x55\xfb\xfd\x8b\x91\xdf\x50\xa7\x22\x72\xc5\xc2\xfb\x99\xb4\x54\x47\xb9\x0a\xf2\x62\x81\x5c\x7b\x8b\x44\x41\xa8\x65\x5d\x9b\xb3\x7d\xde\x5a\x7b\x81\xe8\x79\x3b\x97\x22\x4b\x5c\xcc\x88\x8a\xd9\xff\xea\xa1\xaa\x66\x73\x1e\xe1\xd7\x50\xc7\x6f\xb3\xb6\x2c\x1e\x89\x76\x0a\x45\x74\x2c\x92\xc1\x82\xb9\x49\xa6\x96\x86\x76\xa7\xac\xc0\x3e\xbe\x94\x36\x1f\xb6\xbc\x26\x61\x00\xde\x13\xc7\xd1\x31\x50\x55\x5c\xc1\xb1\xe4\xdd\x92\x38\x7f\x22\x33\xc9\x2d\x0e\x5f\xcf\x95\x39\x6a\x1f\x16\xa1\x4d\x59\x6f\xfd\x48\x41\xba\x80\x40\x0d\x62\x3a\x7e\xb6\x59\xda\xae\x6e\x64\xcc\xbf\xca\xe3\xa6\x25\xf8\xac\x25\x98\x34\x18\xd4\x86\x60\x0f\x85\xc9\xf9\x86\xb2\x4f\x92\x52\xd9\xd7\xc2\xf9\x36\x31\x41\x07\x02\x2a\x28\x89\xe7\x83\x5e\x5c\x50\x84\x4d\x82\xcb\x87\x42\x18\x02\x51\xbb\x3f\x04\x06\xc7\xba\x8e\x8e\x9f\x73\xe9\x39\x7a\xa4\xf3\x3a\x58\xa6\xd4\xbd\x9b\x1f\x60\x81\x72\x63\x47\x92\x6a\xbb\x89\x95\x27\xbf\x31\x60\x86\xcd\x85\x4f\x1b\x1f\xb7\x3f\x84\x12\x33\xa7\xee\xb9\x2a\xb3\x13\x3a\x4b\x1d\xa4\xc2\xc8\x2e\x0c\x05\xc9\x09\x84\x0b\x6c\x49\x29\x8e\x9c\x0c\x38\x58\x68\x76\x9c\x53\x4f\x67\x07\x78\x3e\xf4\xcd\x0f\xd2\xf7\x27\x42\x3c\x14\xe3\xe6\x28\x11\xdb\x95\x2d\x65\x27\x53\xfe\x68\xbf\x65\x03\x39\x5b\xd6\x88\x73\x66\xd7\x35\xa1\x15\xec\xbe\xc8\x67\x73\x2d\x98\xb1\xdb\xbf\xd7\x8a\x4d\xcd\x36\xe3\xd1\x13\x9d\x04\x3e\xe8\x14\x0c\x56\xd9\x75\x51\xdc\x06\x61\x5a\x59\x77\x70\xcb\xb9\x99\xcf\x4d\x95\x1d\x60\x8d\x0f\xb0\x17\xe7\x65\x0d\xba\x51\x2a\xa4\x27\x71\x4a\xf1\xd7\xa1\xae\x41\xe3\x73\x11\x80\xc9\x1f\xf7\xf9\x3d\x8f\xc3\xb9\xb6\x59\xcf\x26\xb2\x5d\xc5\xb5\x5e\xe7\x25\x6b\xe0\x30\xe7\x89\x77\xc4\xa7\x98\x2a\xc6\xa7\xb3\x54\x30\xb0\x80\xd1\xcd\x77\x9b\x63\xbc\x3c\x7e\x2b\x9b\xdf\x0a\xf9\xe5\x15\x74\x59\xdb\xe7\x9f\x90\x2d\xdf\xaa\x48\x9a\x0f\x25\xcb\x42\xbb\x1c\xba\xc0\x79\x48\xab\x05\x45\x41\x2f\x4f\x0a\x1a\xa8\xa0\x64\x8c\x58\xc7\xdc\xd1\x13\xfe\x09\xaa\x70\x7a\x3b\x22\x2b\xc9\x3b\x6f\x6c\xbb\x9b\x46\x5d\x7e\xb7\xc1\xb6\x76\xb6\x86\x1d\x53\xec\x58\x93\x71\x52\x97\xb7\xe8\x8f\x0f\x1d\x75\x65\xf5\x0f\x75\xd6\x74\x3a\x36\xf5\xe8\xb8\x95\x42\x3a\x29\x67\x15\x44\x94\x32\x2d\x65\xf2\x7f\xbd\xe5\x9c\x24\x79\x78\x93\x6f\x2d\x41\x4e\xfb\x57\xb2\x39\xe5\xe3\xe3\x4c\xbf\xa2\x21\xbf\xa2\x01\xff\x63\x69\x31\xd7\x22\x38\xf2\x08\x59\x5b\x8e\x89\x85\xa9\x75\x06\x18\x3e\xb4\xe5\x9f\xa8\x9f\xa6\x90\xbd\x5a\xf6\xb5\xdb\xd0\xf8\xd5\x1d\xe7\x72\x5e\x6b\x8e\xcf\x64\xc8\xe8\x74\xe7\x96\x19\xa7\x8d\x51\xd3\xbe\xf9\x8c\x77\xb4\x1b\xca\x3a\xfe\xc4\x3b\x38\x04\x24\x67\xf4\x45\x70\x28\x86\xce\x8f\x67\x55\x73\x1f\x47\x28\x13\x76\x15\x2c\x4a\xcd\x76\xef\x07\xc1\x2b\x8e\x1b\xdd\xec\x7e\x28\x78\xff\xb7\x72\xcf\xa1\xdf\x3c\x33\x7c\x7d\x41\xf9\x76\x22\xe7\xe9\xe6\x76\xb6\xd2\x1e\x52\xf6\xfb\xcb\xcb\x40\xb3\xef\x9d\x4f\xcf\xc8\x37\xca\x6b\xcf\x15\x67\xc5\x44\xc7\xf7\xcd\x13\xff\x6f\x8b\x0a\x92\xea\x7f\x21\x2a\xa4\xf9\xfe\x3f\xa2\x42\x1d\xaf\x4c\x59\xba\xf8\x76\x27\xf6\x7a\x9f\x18\xc9\x43\xc9\x83\xbd\xe8\x8a\xf9\x03\x27\x03\x22\xaf\x75\xae\x9c\xbe\xfc\x85\xb6\x99\x2b\xb6\x52\x43\x77\xe8\x08\x77\xe0\xb6\x2b\x06\x75\xb5\xc6\xc1\x77\xdf\x5c\xe9\x71\x36\xc6\x68\x10\x97\x96\x0d\xe6\x8a\xda\xc9\x95\x44\x5d\xe9\xa9\xc1\x6a\x06\x39\x22\xc6\x91\x46\x56\xb3\x22\x40\xc0\x11\x91\x2e\x44\xd1\x46\x09\xa2\x7b\xe3\x68\x9e\x5a\xd3\x1a\x62\x23\xb8\x41\x57\xf4\xc6\xe2\xbf\x19\x09\x61\x33\x76\x97\x17\x8f\x60\xa4\xa9\xe3\x9a\xda\x1b\xc5\x91\x35\x25\x1f\xa4\x9d\x58\xf3\x3b\xf3\xe8\x2e\x19\x1c\xf6\xfe\xa7\xbf\xff\xf9\x83\xe3\xe5\x74\xe1\x30\xf1\xce\xc8\xbf\x0c\x93\xe9\x7e\xf3\x16\x1e\xce\x0e\xb9\x98\x7e\x3a\x24\xdf\x5e\x4c\x2e\xe7\x54\x50\x2e\x16\x87\x24\xb6\xc7\x9f\x89\x73\xa9\x68\x26\xb5\xb9\x73\xa9\x98\x63\xb3\x8d\xd1\xdc\xec\xe0\x33\x8e\xd0\x23\x8d\x16\xd1\x45\xd7\x82\x7f\x69\x9b\xae\x17\x2a\x31\xc6\x3b\x2f\x6b\xde\xa0\x69\x3a\x53\xe1\x7c\x72\xfc\x06\xea\x2c\x77\x2e\x95\xe8\x76\xa2\x6e\x3e\xd7\xb7\xe3\xe5\xd6\xcb\x61\x7a\xff\xe8\x5e\xf6\xe5\x63\x0a\x7b\x93\x9c\x71\xb2\x37\x31\x63\x9b\x43\x29\x90\xc7\x02\x0d\x93\x4e\xf9\x26\x0b\x6f\x0f\x90\x57\x04\x37\x1b\x77\x03\x20\x29\x7e\xb4\xee\x9e\x34\xc9\xcc\xbe\x90\x72\xe8\xa7\xcc\x1f\xfb\xc0\x1b\x79\x03\xe9\xcf\x8e\x3c\x61\xcc\xb4\x19\x91\x7e\xc1\x21\xf3\xaf\x3c\x5c\x0e\x4f\xa0\x70\x83\xd3\xb7\xa5\xd2\x6c\x63\x1a\x8c\x57\xde\x35\x58\x43\xc7\xa6\xdd\xa8\x52\x0c\x11\x82\x2e\x51\x93\x6a\xa5\x56\x64\xb1\xb2\xeb\x56\x3a\xe2\xf0\xad\x46\xe1\x5b\xf5\x7e\x7a\x92\x87\x65\xf5\x62\x0a\x45\xdf\x3e\x76\x5d\xd3\x19\x02\xf8\x45\xad\xea\xf2\xab\xab\xfe\xc8\x55\xd5\x40\x6d\xef\xf1\x9d\xa6\x75\x27\xcd\x31\xd2\xd2\xd3\x29\xdc\x5e\xd4\xc7\x15\x5a\xc6\x58\xfe\x8c\x98\xb7\x7e\x15\xa0\x06\x50\xf6\xf0\x54\xc6\x88\xc9\xeb\xe5\x04\xf7\x06\x21\x26\x43\x87\xc0\xf2\x48\x50\x25\xfd\x78\xd2\x97\xd7\x58\xd9\x23\x7f\x16\x71\x88\xb0\xfa\x59\x02\xfb\x9e\xd9\x90\x3a\x51\xd4\xea\x6b\xd9\x1b\x5d\x42\x09\xeb\xde\x5e\xc3\x9a\xb0\x2c\x62\x83\x1a\x38\x73\xc3\xaa\x7e\x54\x51\xe2\x5f\x44\x54\x02\xae\x61\xe1\x7b\x78\x0b\x7f\xdf\xbd\x0b\xf5\x99\x20\xaf\xc2\xb8\x29\x37\xb3\x25\x8b\x4e\xbe\x4e\xb9\x32\x09\xa1\x54\x3b\xd8\xf5\x3e\x54\xa4\x4e\x16\x27\x2b\x1a\x76\x65\x27\xb0\xf8\x8d\x07\xd8\x39\x4d\x0d\xc9\x53\x1a\x4f\xb4\x35\x58\xa0\xf5\x58\x8a\xe4\xf2\xd4\x91\xba\xc9\xb4\xc0\x2c\xe7\xe0\xaa\x4d\xce\x2a\x14\xa4\x46\x33\xd4\x5b\xba\xe6\xdd\x95\xfa\x92\x77\xac\x4c\xde\x7d\xb4\xaa\x3e\x4f\x99\x4c\x86\x71\x1c\x6b\x8d\xdd\xad\x7d\x02\x03\x49\x72\x58\xea\x3b\x93\xf1\xfa\x73\x02\xb5\x44\x71\x43\xee\x7f\xa5\x80\x67\x0a\xe9\x0a\x6a\xc4\x20\x76\xc9\xb8\xef\xcc\x98\xda\xd9\xa6\xfc\x3b\xdd\xc3\xd4\xcc\x02\xd4\x1b\x95\x40\x5d\x8f\x6a\x41\x91\x30\xc2\x3b\x91\x68\x21\x1e\xd5\x7f\x34\xc0\x93\x3f\x32\x77\x8e\x0f\x74\x31\x81\x7d\xce\x7e\x36\xe3\x1d\xf2\xcb\xa5\x92\x6e\xef\x6c\xea\xb6\x78\xb3\x3f\x68\x30\x32\xfa\x5e\x3a\x79\xd2\x09\x45\xa4\x33\x0b\x76\x83\x10\xed\xef\x8a\xd2\x3f\x74\xcd\x67\xda\x48\x69\x07\x89\xe5\x6f\xdc\xe2\xa8\x28\xbb\xa2\xe2\x98\x3f\x57\xec\xb7\x82\xe5\x10\x7e\xf0\x47\xea\x28\xa0\x85\xa5\x93\x6d\x03\x6d\x15\xec\x33\xe4\xd8\x4c\x8e\xca\xcc\x61\x2f\x09\x45\xc1\x4c\xbd\x09\xd7\x99\x5f\x3b\x47\xbd\xb0\x97\xb3\x2b\xdd\x86\xc2\xbf\x7f\x05\x00\x00\xff\xff\xb5\xb8\xc2\x31\x3e\x28\x00\x00")

func builderJsBytes() ([]byte, error) {
	return bindataRead(
		_builderJs,
		"builder.js",
	)
}

func builderJs() (*asset, error) {
	bytes, err := builderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "builder.js", size: 10302, mode: os.FileMode(420), modTime: time.Unix(1473461772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker.js": dockerJs,
	"docker.async.js": dockerAsyncJs,
	"builder.js": builderJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"builder.js": &bintree{builderJs, map[string]*bintree{}},
	"docker.async.js": &bintree{dockerAsyncJs, map[string]*bintree{}},
	"docker.js": &bintree{dockerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

