// Code generated by go-bindata.
// sources:
// docker.async.js
// builder.js
// DO NOT EDIT!

package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerAsyncJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4b\x6f\xe3\x36\x10\x3e\x4b\xbf\x82\x16\xb0\xa0\x14\x5b\x72\xcf\x31\xdc\xa2\xe8\x03\xd8\x1e\xba\xc5\xf6\xe8\x18\x81\x62\xd3\x36\xd7\x7a\x95\xa4\xdc\x04\x8e\xfb\xdb\x3b\x33\xa4\x5e\xb6\x77\xb3\xc1\x6e\x72\xb0\x24\xce\x7b\x38\xdf\x47\xe6\x90\x2a\xa6\x77\x6c\xce\x94\xf8\xa7\x96\x4a\x84\x5c\xef\x78\x34\xf1\xbd\x4d\xa9\xf2\xd4\xf4\x05\xb5\x91\x19\x8f\x12\x2b\x00\x8d\xfb\x81\xb0\x58\x0b\xa5\x57\xa5\x12\x3c\x9a\xf9\x3e\xb9\xcd\xe4\x4a\x80\xce\xcf\x4a\xa5\x4f\x49\xa5\x4a\x53\x9a\xa7\x4a\x24\xb4\x0e\x3a\xfe\xa6\x2e\x56\x46\x96\x05\xfb\xb5\x5c\xed\x85\x0a\xcb\x0a\xbf\x74\xc4\x8e\xbe\xe7\xde\xc1\xdc\xbd\x3d\x3f\x1f\x4f\xbe\x67\x76\x52\x27\x6b\xf1\x50\x6f\x3b\x89\xfd\xf6\x4f\xbe\x2f\x1e\xab\x52\x19\x9d\x58\x7f\xa0\x61\x5f\x66\xbd\x50\xab\x34\xcb\xc2\x55\xbe\x9e\xb0\x54\x6d\xf5\x84\x91\x2d\x45\xf4\x3d\x4a\x1a\xac\x82\xb5\xb5\x0f\xd8\x98\x81\x6a\x62\x94\xcc\xc3\xc8\xf7\xe4\x86\x85\x68\x45\xea\x9e\x66\x63\x50\x25\xa5\xd0\x96\x28\x35\x3d\x9d\xce\x4f\x14\x21\xf9\x54\xca\x22\xe4\x8c\x47\xec\x96\x16\xa0\x3b\x1e\x14\x82\x71\x74\xa2\xab\x4c\x1a\x92\x26\x79\x5a\x85\x6d\x96\x61\x0e\x31\xa0\xb9\xa6\x56\x05\xcb\x5d\x02\x33\x76\x8a\x3a\x77\xcd\x22\xf4\xd1\x9b\x4e\x9b\xd4\xed\xe6\x84\xfc\x9d\x66\xef\x34\x9f\xb0\xb6\xd2\xce\x10\x0a\x71\x8e\x0b\xf1\x2f\xfb\x4b\x95\xb9\xd4\xa2\x17\x5a\x09\x5d\x66\x07\x31\x81\xf0\x9f\xc4\xca\xd8\x62\xb1\x74\xdb\x2a\xf8\xf0\x56\xd0\xf5\x32\x13\x49\x56\x6e\x43\x8e\x1d\xbd\x85\x50\x58\x19\x08\xf3\x72\x5d\x83\xe8\xfe\xbe\x52\xf2\x90\x1a\x71\x6f\x9b\x19\x42\xaf\xbb\x18\x42\x29\xf4\xaf\xeb\xcc\xf9\xa7\x00\xb0\x1a\x35\x45\xdb\xe0\xb4\x34\x43\xb9\xcb\x2a\xb4\x46\xae\x78\x12\x9d\xa8\xa3\xf8\x83\x23\x40\x93\x47\xb3\xd6\x6e\x7f\x37\x7a\x56\x9a\x83\x03\x09\x75\x57\xd8\xb0\x05\x17\xc5\x01\xb2\xc7\xc7\xef\x32\x13\xf8\x5a\xd5\x0f\x99\x04\x18\xc0\xeb\xa1\xcc\xea\x9c\x16\x33\x59\xec\xf9\x12\x02\x90\xb7\x64\xa5\x04\x14\x87\x1d\x6f\x8b\x2a\xd2\x1c\xba\x26\xf3\x74\x0b\x8f\x2f\xce\x32\x7b\x7e\x66\xc7\x13\xb4\x8b\xc1\x1f\xa6\xb4\xc9\xd2\x2d\x65\xb3\x84\x2a\x70\x11\xf6\x91\x85\x28\xd9\x8b\x27\x26\x8b\x81\x3b\xea\xd5\x68\xf4\xdf\x82\x53\x2c\xbe\x4c\x24\x80\xef\xf1\xc3\x26\x04\xe5\x28\x62\xb0\x3b\x46\x16\x35\x40\x8c\xb9\x3f\x74\x74\x48\xb3\x2e\x81\x05\x68\x2e\x3b\xb9\x73\xd8\x35\xe6\xcc\xe3\xb1\xd5\x6c\xb4\xdb\x76\xb1\xf9\x1c\x73\x8c\x28\xd1\x39\xb5\x31\xde\xa0\xe0\xc2\x04\x37\xa0\xdc\xd8\x3c\xc0\x88\x6b\xd8\xc3\x62\xcb\xcf\xbd\xdb\x7c\x31\xd7\x45\x10\xc7\x88\x2e\xf4\x3c\x66\xc1\x1c\xdf\x41\xd2\xcb\x1b\xff\x4e\x4c\x64\x5a\x50\x84\x21\x0a\x41\x35\x72\xc3\xe5\x59\x87\xf0\x7b\x06\xb3\x43\x0f\x66\x3c\x8e\x79\x1b\x8d\xcf\xf1\xfd\x80\x90\xa3\xf1\x73\x51\x5a\x77\x8a\x95\xb5\xa1\x0d\x23\xb1\xd7\xed\x17\xee\x16\x86\x76\xaa\xa4\x7b\xb0\xc1\x17\xfb\xa5\x5d\xc3\x64\xa7\x77\xeb\xf1\x34\x31\x42\x9b\x70\xdf\xe6\xe9\x79\x7b\xe4\x9f\xc0\x7e\xb8\xa0\x9d\x68\x3c\xb7\x6d\x9e\xbb\x71\x04\x8e\x09\x6e\x03\x20\x16\x68\x8e\x33\xb1\x0f\x48\x2e\xa9\x6a\xbd\x0b\x07\x45\xd9\x16\xee\xb1\x30\x5b\x95\xe7\x77\x36\x6e\x3e\x6a\x63\xeb\x1d\xf4\x98\xc6\xd3\x3a\xc4\x1e\x76\x54\xd2\x6d\x45\x9b\xeb\x67\xec\xae\x75\x17\xba\xd4\x73\xe0\xdb\x5f\xc7\xc3\xc8\x59\xd4\x8a\x99\xe5\x5d\xeb\x2a\x13\xc5\xd6\xec\xd8\x8f\xec\x07\xdb\x31\xa7\xe5\x58\x2f\x00\xd6\x0b\x26\x2e\x6a\x3f\x49\x2c\x91\x54\xc7\x1d\x43\xc6\x6b\x16\xc7\x08\xd9\x79\xc3\x95\x3d\xfc\xa2\x8d\x1b\x0b\x3a\x30\x02\x55\x17\x41\x73\x64\x74\x67\x50\x84\x8c\x63\xf9\x40\x9b\x54\x99\x0b\x3a\xa0\x2c\x07\x8e\x48\x2f\x68\x82\xf5\x5c\xcd\xc0\xd7\xf4\xe6\x4b\xce\xae\x71\x0b\xf6\xec\x55\xf4\xf2\x02\xb9\xbc\x86\x31\x9a\x51\x6c\xa9\x00\xc2\xf6\xd6\x06\xdf\x0d\xa5\x7e\x27\x2e\x19\x5d\x87\xfa\x67\x78\x04\x49\x63\xc8\x19\xfe\xa5\xd6\x6b\xc8\x81\xf5\xc8\xe1\x4d\x71\xc2\xae\xe1\xc4\x01\xc5\xe2\xa4\x3d\xe0\x1d\x4e\x46\x34\x52\xbb\x54\xff\x02\xa7\x40\x2a\x0b\x38\x79\x69\x10\x2d\x5e\x40\x1b\x41\x85\xd3\x7c\x81\x1e\x44\x04\x40\xc1\x82\x82\x35\xa0\x38\x03\xd3\x05\x4a\x7a\xf4\x4b\x91\xa5\xfe\x58\x17\x05\x10\xfb\x95\xb0\xb2\xd0\x15\x1c\xea\xbd\xd0\xad\x4c\xef\x12\xf1\x28\x56\x21\x77\x57\x2f\xa7\xca\xe2\x0d\x3b\x1e\x93\xf7\xeb\xd3\x89\x5a\x41\x3e\x01\x1e\x6b\x24\xb8\xe6\x5a\xd6\xa3\x49\x17\xc8\x39\xb1\x30\x0a\x9c\x1d\xf2\x5a\x13\x06\xf4\x88\x01\xad\xfe\x57\x04\x25\x0a\x71\xb3\xd0\x77\x32\xcc\x05\x30\x7c\x33\xed\x18\xa1\xac\x06\x18\xbe\x20\x03\x8e\x2a\x78\x73\xc2\x0b\x71\x42\x4b\xd0\x17\xb8\x6f\x14\x46\x47\x44\x08\xce\x95\xca\x5f\x66\x16\x0e\x4a\xf1\x06\xbc\x2d\x50\xbc\x1c\x9a\xcb\xaf\xb2\x97\x57\xad\x1f\x6a\x99\xad\x07\xf6\x55\x6a\x76\xc0\x5d\xe9\xf6\xd2\x09\x29\xa3\x1b\x98\x63\x50\xe0\xa4\x36\x61\x68\x31\x70\xda\x8e\xc9\xf5\xc4\x70\xb2\x95\x40\x21\xde\x51\x3f\x8a\xed\x6f\x8f\x55\xc8\xef\xee\xf4\x4d\xd8\xec\x08\xc2\x23\x82\x95\x31\x8f\xce\x72\xa8\x34\xde\x8e\x77\xa2\xe8\x61\x19\xf6\xc8\x8e\x62\x7b\xbd\xdc\xda\xb3\x17\x05\xee\xfe\xd8\x26\xd7\x47\xcf\xdb\xe4\x07\xf7\xc9\x38\xfd\xc6\x2c\x81\x4f\x87\x67\x04\x38\xbf\x3c\x6f\x2a\x0d\x87\xcd\x68\x04\xef\x70\x59\x80\x1b\x55\x1a\x2c\xe1\xbe\xb0\x58\x9e\xd5\xfb\x1e\xf1\xfc\x7d\x6a\x3d\xab\x96\x98\xe2\x5b\x77\xa4\x41\xe6\xcb\x53\xec\x34\xdd\x71\x0e\xe9\xbc\x14\xf7\x8f\xbf\x3f\xfc\x99\x54\xa9\x82\xff\x81\xda\xc8\x18\xf8\xff\x00\x00\x00\xff\xff\xf6\x8a\x4e\x68\x19\x0f\x00\x00")

func dockerAsyncJsBytes() ([]byte, error) {
	return bindataRead(
		_dockerAsyncJs,
		"docker.async.js",
	)
}

func dockerAsyncJs() (*asset, error) {
	bytes, err := dockerAsyncJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker.async.js", size: 3865, mode: os.FileMode(420), modTime: time.Unix(1473520813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _builderJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x1a\xdb\x72\xa3\xc8\xf5\x5d\x5f\x81\x54\xc9\x0a\xc6\x04\x7b\xf3\x90\x07\x6b\xfd\x30\x3b\x3b\xa9\xe4\x21\x3b\xa9\x6c\x5e\x52\x2e\x95\x0b\xa3\x96\xcd\x1a\x01\xa1\xc1\x33\x8e\x47\xf9\xf6\x3d\xe7\xf4\x95\xa6\x11\x78\x6e\x4b\x4d\x8d\x05\x7d\xfa\xdc\x6f\x7d\x59\x3c\xa6\x4d\x70\x13\x5c\x05\x0d\xfb\x6f\x97\x37\x2c\x5c\x77\xe5\x8e\x35\x3c\xab\x1a\xb6\x8e\xe2\x45\x00\xcf\xbe\x6a\x0e\x69\xdb\x83\x69\xf3\x62\x1d\x25\x62\x40\x02\xf1\x83\x0d\x01\xaf\x6a\xfa\x4f\x55\xf6\xc0\x1a\x7b\x70\x47\x5f\x92\x94\x3f\x95\x19\xa0\x11\x00\x02\xf8\xed\x23\x2b\xdb\xb7\x87\xbc\x6d\xfb\x53\x18\x7e\xe7\x00\x6c\x03\x6c\x16\x8b\xc5\xbe\x2b\xb3\x36\xaf\xca\x20\xe7\xef\x6e\x7f\x65\x59\x1b\x56\xb7\xbf\x46\xc1\x33\x61\x6b\x58\xdb\x35\x65\x00\x5f\x82\xab\xab\xab\xc0\x02\xd8\x2c\x8e\x0b\x92\x9d\xa5\xd9\xfd\x6b\x64\x04\xa8\x69\x5c\x61\x91\xf3\x36\x0e\xb2\x5b\x85\x08\x21\x73\x80\xb8\x88\x83\x02\xfe\xe0\x70\x52\xb0\xf2\xae\xbd\x8f\x81\x08\xef\x0a\x54\xcf\xf5\x16\x18\xb2\xc8\x96\xec\x43\x1b\x46\x49\x7b\xcf\xca\xd0\xa0\x56\x28\x2d\x40\x81\x61\x43\x9f\x8f\x91\x44\xa2\x67\x08\x34\xd6\xac\x7c\x1f\x84\xc0\x0c\xb0\x11\x29\x0c\xff\x6c\xaa\x43\xce\x59\x02\x98\xaa\xe2\x91\x85\x02\x63\xb4\x71\x29\xb9\x70\xd9\x2d\x89\x7a\x9d\x9f\x9d\x6d\xa3\x01\xab\x30\xc9\xa6\x2b\xf0\x20\xe2\xa4\xee\xf8\x3d\x0d\x6f\x9c\x51\x4b\x70\x3d\x72\x94\x50\x47\xad\xf4\x1f\xbb\xbc\xd8\x91\x81\x2d\x6a\x37\x37\xbc\xab\x59\x83\x14\xfb\x0a\x90\xd0\xe1\xa1\xda\x75\x05\xe3\x71\xc0\xca\xc7\x38\xd8\xb1\xdb\xee\xce\x66\x4f\xce\x4f\xb2\xb4\x28\xc2\xf6\x3e\xe7\x16\x73\xf8\x9a\xc8\xf9\x40\x55\xfe\x72\xc6\x01\x2d\x8c\xe1\xff\xe7\xe7\x1f\x3f\xae\x77\xe0\x73\x45\x55\x1f\xc0\xdf\xd6\x06\xf2\xfc\x9c\x60\x79\x9b\x36\x6d\x57\x87\x2e\x8d\x9d\x72\xf6\x92\xbd\x97\x9e\x1f\x3e\x13\xab\x97\xcb\x25\xfd\xd5\xda\x70\xa4\xbc\x63\xed\x9b\x86\xa5\x2d\x7b\x57\xe3\x3b\x47\x71\x49\x54\x5b\x46\x54\x5e\xd5\xa1\xb3\x3d\x1f\x7b\x1f\xd9\x87\xac\xe8\x76\x0c\xbd\x70\x5d\xa6\x07\xb6\x8e\x83\x75\x5d\xf1\xb6\xe9\x4a\xfa\xd9\x30\xf3\xeb\x16\xf5\xa9\x00\xd4\x4b\xcf\x8e\x6b\x0d\xb2\x63\x35\x83\x84\x50\x66\x39\xe3\x34\xe5\x3e\xe5\x4c\xe2\x21\x1d\x28\x3c\xfa\x25\x2f\xf3\x36\x4f\x8b\xfc\x7f\x6c\xbd\xed\xb9\x2c\xc8\x93\xd0\x74\x6d\x61\x7b\x74\xf9\xba\x69\xd2\xa7\x24\xe7\xf4\x37\x0a\x34\x34\x8a\xa4\x5f\xb6\x9b\xe1\xc4\xe5\xf2\xff\x7a\x3c\xc9\x81\xd9\x0f\xef\xf6\x21\xea\xcd\xf5\x5d\x7c\x38\x2b\xf6\x49\xdb\xe4\x77\x77\x60\x98\x75\x59\xb5\xf9\x3e\xcf\x52\x54\x38\xf0\x5e\x26\xfc\x21\xaf\xeb\xbc\xbc\x8b\x91\xbe\xe3\xdc\x96\x83\x83\x09\xfa\x63\xc6\x18\xe6\x17\x64\xc7\x20\x44\xdb\x3c\xb0\xa7\x20\x2f\x09\xa3\x2b\x39\x0e\x3f\xa6\x45\xc7\x84\x53\x5e\x03\xa8\x47\x44\xf8\x7a\x7d\xb1\xc5\x88\x5f\xfd\x61\xe5\x93\x4a\x02\x25\xbc\xbb\x05\x93\x87\xdf\x47\x94\xee\x1c\xdf\xb1\x1f\xe1\x43\x37\x09\x04\x2a\x98\x37\x84\xd7\x58\xd3\xf7\x88\x7d\x0c\x58\x01\x96\xf0\x93\xa9\x9b\x2a\x63\x9c\x27\x75\x91\xb6\x58\x11\xbe\x14\xcd\xc5\x08\x07\x60\x6f\xe9\xed\xda\xda\x80\x22\x1a\xe8\x16\x9f\xac\x2a\xdb\xbc\xec\xd8\xc6\x87\xcc\xaf\x47\x5d\x47\xc8\x2e\x51\xf0\xdd\x77\x41\xdf\x37\xe5\xc0\x98\x98\xca\x9c\x83\x78\xa6\x01\x11\xd1\x3e\x69\x47\x98\xf9\xab\xcc\x0f\x9a\xaa\x5f\x24\xa9\x60\x52\x26\x10\x27\xe0\x49\x0f\x75\xbd\xd9\x4d\x49\x90\x32\xfe\x56\x55\x0f\xe1\x3d\xfc\x17\x2b\xff\xb5\xd9\x6b\x9f\x6a\x56\xed\xc9\x8a\x08\xb3\x25\x7f\x58\xab\xf9\xeb\xd1\xf2\xa4\x27\x88\x64\x4d\x99\x0e\xd1\x4f\x17\xac\x7e\xf2\xd4\xce\x24\x4b\x44\x02\xbe\xd8\x56\xc8\x55\xdc\xeb\x24\xec\xef\x96\x97\xdc\x00\xcd\x9f\x21\x59\x5e\x6a\x91\x43\x47\x48\x8b\x13\xcc\x31\x98\x59\x83\xb3\x60\xf5\xa7\x15\xfc\xaf\x6a\x86\x51\x6c\x6c\x50\x53\x02\xbd\x0c\xfc\x65\x5f\xb8\x49\x43\xc9\x08\x8c\x85\x88\x36\x83\x41\xc2\xc0\xe5\xb0\xaa\x5d\xc9\x21\xad\xad\x92\xc9\x5b\x56\x8f\xe5\x83\x25\x0e\x26\x84\x45\xdb\xa1\xec\x8a\x62\x34\xa9\x21\xfc\x06\xea\xdb\x4d\x52\xe7\xd9\x03\xe1\x8e\xa1\x9a\x98\x6a\xe1\xad\x1c\xdb\xa8\xef\x66\xd0\x15\xe6\x05\xa8\x7c\xc8\xa5\x4d\x27\x58\x5e\x11\x33\x00\x3f\x60\xc7\x91\xd1\x63\x11\x97\x71\xcc\xe9\x37\xc4\xce\x3f\x48\x4d\xc2\xab\xf0\xf3\x58\x1e\xa7\x2e\x6b\xe1\x33\xb3\x72\x38\xc4\x20\x4c\x40\xa0\x3e\x1b\xdb\x24\x6d\x53\x7b\x38\x3e\x69\xed\x89\x9a\x44\x54\x46\x6a\x92\x76\x14\x51\x3f\x04\x6c\x1f\x64\x50\x4d\x24\xfc\x55\x80\x9d\xfe\x3e\x2f\xd9\x6e\x34\x4e\xa3\x61\x2d\xa2\xd9\xb2\xcd\x01\x4b\x33\x44\x44\x96\x84\x3c\x29\xc6\xf2\x43\x7a\xa7\x3f\xa3\xdd\x83\x97\x56\x61\xc2\x33\x51\x82\x07\xac\x3a\x19\xde\x6b\x5c\x95\xd0\x6c\x5f\x46\x2a\xa7\x7a\x74\x07\x05\xb1\x2e\x17\x30\x84\x62\xa0\x11\x42\x29\xb4\xf0\xf1\xa3\xca\x1a\x8e\x20\x3e\xb7\x77\x78\x80\xac\x3c\xe1\xf7\x46\x1a\xab\x8f\x43\x71\xbc\x93\x7c\x34\xc6\x08\xa8\xe7\x73\xec\xe4\x61\x78\xd0\x36\x39\x2a\x19\xd6\x40\x4b\x4f\x76\xe4\x51\xb3\x69\x87\x5c\xda\xb5\xd5\x8f\x22\xd5\x4d\x04\x9e\xcf\x2d\xf4\x1a\x30\xb4\x73\x6d\x7c\x3a\xa4\xf1\x19\xb4\xb5\x3e\xc1\x86\xdd\xad\x35\xe7\x44\xa3\x3b\x8e\xcc\xdb\xf1\x92\xad\xc6\xda\x5e\xad\xb8\xcf\x6b\x7f\xfb\x7a\xf3\x8f\x1f\x27\x3a\x39\x7c\xd0\x2a\x54\x4b\xaf\x74\x59\xf5\xc2\xd4\x22\xc8\xb1\x0a\x5e\x7b\x89\xd9\xd1\x08\xda\x78\x03\xbd\x51\x0a\x19\xad\x09\x29\xe6\xe2\xc9\x39\x39\xff\x57\x57\x96\x20\xf1\xdc\x09\x40\xe4\xef\x18\xd9\x02\x7e\x00\xee\x33\x9b\xa7\xb0\x28\xb9\xfc\x91\x3a\x63\x19\x6e\x3f\x9f\x6c\x6c\x0c\x22\x6d\xec\x51\x2c\xe8\x71\xc0\xc1\xf5\xf7\xb4\x00\x81\x05\xe5\xa8\xa3\x7b\xe9\xae\x6c\xba\x2b\xa4\x9b\x16\xd0\x16\xef\x9e\x7e\x41\xf2\x4c\xa5\x8f\x59\xf9\x63\x9f\x42\xdb\x7e\x22\x83\x98\x35\x02\x32\x7c\xd1\x63\x78\x0e\x7e\xbb\x3c\xa8\xf5\xec\x49\xdd\xa8\xe7\xa5\x79\x55\x3d\xb3\x80\x3c\x85\x87\x98\x0b\x47\x6a\x8b\xef\xf1\xd4\x9b\x2f\x25\x83\x64\x0f\xf5\xfc\x59\x7c\x38\xd6\xfb\xf3\x16\x7b\x44\xc4\x8a\x9d\x85\xce\xef\x73\x7d\x70\x6e\x6b\xf8\xb5\xd5\xf2\xc9\x2e\x75\x9c\xd5\x94\xf8\x1e\xda\x23\x12\x6b\x4e\xdf\x32\x94\x16\x5b\xba\x58\x4c\x9b\xcc\x12\xc6\x76\xc1\x8c\x90\x52\x1a\xec\x35\x3c\xe2\x83\xa4\x3f\x47\xcc\xf3\x57\xdf\xc8\xf3\x5e\x9d\x4f\xf9\xde\x69\xb2\x5f\x50\xaf\xbf\x57\xbe\xf9\x7a\x76\xfc\x5c\xce\x1c\x0e\xe7\xd9\x54\x3d\x33\xb2\x1b\x76\x97\xa3\x63\xfe\x3e\x66\x10\x80\x5c\x54\xac\x53\x22\x61\xf6\x9a\x01\x86\xcf\x9c\xea\xcc\x5e\xd2\x5d\xf7\x96\x03\xb3\xdc\x69\x4c\x70\xa7\x89\x19\x6a\x42\x9c\x02\xf0\x13\xcb\x24\x09\x31\xba\xea\xe9\x77\xf3\x55\xfd\xc9\x5b\x25\x27\x5b\x78\x58\x1d\x3e\xb2\x86\xc3\xea\x70\xa2\x99\x9f\xb3\xda\x33\xbd\xa2\x2e\xbc\xd3\x8b\xb8\x87\x93\xab\x02\x1c\x56\xbd\xf4\x78\xeb\x79\xca\x49\xaa\x5e\xbf\x3e\x6f\xb5\x88\xc9\xa6\xaa\x4f\x39\xc7\x4b\xa2\xd8\xdb\x9e\x54\xf5\x54\x77\x72\xf4\xee\xca\xcc\x25\x3c\x47\x2f\xa7\x83\xc7\x1f\x34\x5a\x2d\x3e\xe6\xa6\xa2\x62\xf4\xbc\x61\xe0\x8d\x6e\x58\x40\x57\xd2\x66\xf7\x16\x2a\x6f\x7f\x33\x07\x97\x25\x9a\xd9\x21\xa1\xed\xec\x13\x5b\x10\x76\x30\x36\xec\x50\x3d\xb2\xdf\x39\x1c\xf1\x19\x13\x0b\x0f\xd6\xa4\x68\xfd\x8c\x84\xdb\x40\x78\x1a\x0b\xd2\x36\xa3\x0b\x26\xce\xda\x7f\xe7\x07\x56\x75\xed\x4c\xf7\xce\xa0\xfc\x55\xd0\x37\x16\xd5\x5d\xb8\x16\xca\xd9\x05\xc2\x49\xa6\x9a\x6f\x6b\xb7\xdb\x1f\x66\xc7\x38\xf8\xcb\xc5\xc5\x70\xec\x38\xd8\x53\xfd\x62\x9e\x66\x6c\x2e\x77\x5b\x74\xb6\x3f\x7f\xb5\xe7\x07\xd5\x0e\x18\xf4\x50\x47\xa0\xd5\xb9\x0c\x86\x3b\xec\x1a\x44\x9c\xcd\x5f\x3a\x4b\xf4\x67\x5a\xe1\x5f\x06\x2b\x79\x54\x0a\x6b\xbf\x3d\x98\xed\x32\x80\x70\x2d\xf1\x08\xb1\xad\x2e\xd5\x41\x23\x7a\xa0\x77\x2e\x0d\xeb\x99\x2b\x5a\x38\xae\xc4\xd4\x95\xda\x17\x5d\x8d\x4c\x5e\xab\x1a\x28\x26\xcb\x9d\x6c\x98\x80\x1b\xd8\x2a\x73\xae\xb7\x92\x11\xb5\x1a\x5e\x8f\x63\xa3\xe4\x20\x65\xd0\xe0\x7a\xba\xc4\x67\x6a\xea\xd6\x20\xc2\x45\xc7\x6d\x9a\x3d\x80\x92\xfa\x86\xab\xca\xc1\x41\x01\x69\x53\xd0\x41\xdc\xde\xb5\xab\x5a\x0f\x83\xc1\x5e\xff\xf2\x9f\x9f\xdf\x38\x56\x8e\x17\x0e\x91\xc1\x7e\xd9\xd7\x21\xd2\x2f\xe3\x9f\x42\xc3\x49\xb1\x8b\xfe\x2f\xea\xe1\x17\xd6\x3c\xe9\x94\x8b\xc5\x31\x0a\xed\xf3\x9e\xc8\xb9\x19\xa2\x0f\xd1\x52\xe7\x66\x48\x8a\x8b\x4b\x79\x8a\x95\x3a\xa7\x57\x74\x5b\x61\xc1\x3e\xd4\x55\xd3\x72\x19\x18\xe6\xe2\x82\xb5\xf7\xe8\xbb\x90\xe0\x1c\xde\xa5\xbd\x5d\x39\xa0\x14\xa4\xce\x51\x16\x1d\x14\x97\xd5\xfb\xf2\xc6\x5c\x53\x78\x3e\xf6\x2f\x94\xb8\x7b\xde\xa9\x09\xe7\x41\xe3\x21\x1b\x77\xc7\xdf\xac\x43\x3b\x09\x91\x98\xf3\xfa\xc1\xe9\xdd\x68\x77\xe7\x32\x32\xc4\xa5\x19\x98\xee\x91\xac\xa3\x21\xb5\xbc\x72\x13\xa0\xaf\xc4\x48\x58\xe3\x95\xc7\x59\xda\xe8\xa1\xaa\x53\x48\x92\x62\x63\x40\xc1\xc4\x7d\x2b\x44\xc3\xf3\x7a\x71\x8e\x7d\xed\x39\xa7\x57\x6a\xb0\x2f\x4d\xa8\x93\x2e\xbf\x36\x49\x7d\x3f\x59\xe0\x5e\x1c\x0e\x4f\x31\xb2\xe0\x66\xf6\xf1\x76\x16\x80\xc5\x7d\x1d\xa5\x85\xcd\x50\x26\x7d\xd8\x88\xc0\x5f\xf1\x8c\xf1\x1b\x9f\x2d\xfa\xb7\xfb\xb1\x83\x50\x77\x8a\xe8\x16\x82\x15\xbe\xd6\x8c\xa3\xb9\x24\x56\xe2\xbd\x20\x99\x08\xec\x66\x93\x82\x94\x26\xa8\x7a\xd0\x2b\x0d\x72\x44\x54\x06\xbb\x48\x58\x23\x6c\xa7\x06\xd8\x4e\x7f\xa7\xa5\x9f\x42\xa5\xbf\xf7\x37\x4e\x61\x58\x7e\xe8\x43\xd1\xdb\xdb\xa6\xa9\x1a\x8d\x00\x5f\xe4\xa8\xaa\x81\xaa\xf4\x1a\x6e\x64\x21\x52\x36\x31\xdf\x14\xae\x5b\xa1\x32\x83\x4b\x9d\x16\x60\x8d\x97\x3f\x57\xa8\x31\x6d\x9d\x19\xe1\x65\xdd\xaf\x93\x07\x02\x2a\x00\xf0\x55\x5a\x83\x5c\xad\x37\xef\x1a\x47\xb7\xb6\x5b\x7a\x86\x0d\x32\x99\x69\xcd\x0e\xa3\xb8\xe2\x91\x3c\xb0\x27\x1e\xfa\x10\xcb\xcb\x7d\xc1\x0f\x81\x0d\xa9\x02\x48\x8e\xbe\x94\xbc\x96\xc5\x17\xe3\xee\x2d\x2f\x18\xe3\x96\x36\x6c\x50\x0d\xa7\x6f\x18\xc9\xab\x89\x39\xfe\xc5\x89\x92\xc1\x0d\x0c\xfc\x00\x5f\xe1\xef\xd9\x99\xaf\x8d\x07\x7e\xe5\x8c\xeb\x7c\x3b\x9a\x19\x69\x67\xcb\xc9\x8a\x3a\x48\xa4\x68\x47\xbb\xe0\xfa\xf2\xda\x64\x3e\xb3\x3c\x61\x9f\x37\x1c\x73\xac\xd9\x05\x1a\x93\x54\xa3\x9c\x92\xb8\x27\xad\x9e\x05\x52\x9b\x54\x25\x86\xfb\x86\x54\x5d\xbe\x05\x66\x19\x07\x47\x6d\x74\x56\xf2\x20\x31\xaa\xae\xdc\xd1\x95\xa7\x7d\xae\x2e\x3c\x99\xcc\x35\xb8\x9b\x25\xb3\xd3\xa3\xb8\x65\x72\x65\x8e\xc6\x7a\x25\x4e\xff\x46\x47\x12\x14\x74\x85\x31\x57\x83\x7a\x50\x4b\x64\xd7\x67\xfe\x17\x32\x38\x93\x49\x97\x51\xcd\x06\x91\x8b\x4c\x3d\x1a\x51\xb5\x53\xd9\x86\xf7\x9d\x8e\x7d\x35\x73\x10\xcf\x08\x81\xb2\x9e\x94\x82\x3c\xc1\xc0\x3b\x9e\x68\x4d\x3c\x29\xbf\x51\xc0\xe3\xf0\xf8\xd2\x69\x5f\xe8\x94\x18\x1b\xcd\xc3\x68\xc4\x3b\xe8\x97\x4b\xc9\xdd\xc1\xe9\x03\x6c\xf6\x46\x2f\xf7\x69\x1e\x87\x56\x9a\x5c\x6a\xfa\x3c\xd2\x39\x76\x73\x9d\x10\xf5\xef\xb2\xd2\xde\x37\xd5\x7b\x2a\xb4\x54\x3d\x42\x71\x53\x3c\x5c\x67\x79\x93\x15\x0c\xe3\xe7\x32\xf8\x23\x0f\x52\x70\x3f\xf8\x23\x64\xe4\xb0\x86\xa0\x8d\x83\x0a\xba\x37\xa8\x31\x64\xd8\xc4\x6c\x4c\xd3\x6a\x3b\xf2\x79\xc1\x48\xbe\xf1\xe7\x99\x6f\x1d\xa3\x03\xb7\xb7\xb6\xea\x40\x06\xf8\xf7\x5b\x00\x00\x00\xff\xff\x5b\xa9\x5f\x6b\x84\x2f\x00\x00")

func builderJsBytes() ([]byte, error) {
	return bindataRead(
		_builderJs,
		"builder.js",
	)
}

func builderJs() (*asset, error) {
	bytes, err := builderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "builder.js", size: 12164, mode: os.FileMode(420), modTime: time.Unix(1473519734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker.async.js": dockerAsyncJs,
	"builder.js": builderJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"builder.js": &bintree{builderJs, map[string]*bintree{}},
	"docker.async.js": &bintree{dockerAsyncJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

