// Code generated by go-bindata.
// sources:
// s3.js
// DO NOT EDIT!

package s3

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _s3Js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x3f\x4f\xf3\x40\x0c\xc6\xf7\xfb\x14\x9e\xda\x54\xaa\xf2\xf6\x55\xc7\x28\xac\x2c\x0c\x48\x8c\x08\x45\x25\x72\xda\x83\x70\x77\xb2\x9d\xd0\x0a\xe5\xbb\x73\x7f\xd2\x90\x56\x88\x05\x6e\xb2\xfc\xf8\x7e\x7e\xfc\x28\xa5\x9a\xce\xd4\xa2\xad\x81\x87\x2d\x64\xd6\x85\x92\x57\xf0\xa1\xc0\x3f\x39\x68\xce\xab\xba\xd5\x68\x04\x4a\xa8\x2a\x47\xba\xdf\x09\x56\xbc\x9d\x46\x0b\x35\x28\x85\x47\x67\x49\x38\xf7\x8c\xd2\x83\x0a\xa5\xfa\x1d\x81\x23\x2b\x36\x36\xf2\x58\xca\xc9\xa1\x97\x62\x9d\xef\x31\x20\xa7\xed\x19\xdb\x8e\x6a\x5c\x83\xec\xc8\x4b\x67\x07\x01\xc3\xd8\x36\x7e\x34\x98\x29\x62\x93\x50\x3a\x32\x60\xf0\x1d\xee\xc9\xbe\x69\xc6\xec\x8b\x43\xc8\xb6\xed\x3d\x88\xf0\x05\xeb\x09\x14\x5e\x00\x9d\xcf\xc9\x6f\x51\xae\x76\xae\x67\x6e\x90\x68\xfe\x33\x3c\xdd\x8c\xed\x71\x7d\xe2\xc7\x56\x71\x31\x38\xe9\xd1\x48\x36\x53\x87\xb1\x1e\x52\x6a\x29\x88\x56\xf3\x65\x12\x8e\xb0\xd1\xc7\x1f\x13\x08\x5e\xd2\x58\xde\xa2\xd9\xcb\x01\x6e\x60\x03\x8b\x05\xa4\xe6\xe3\xe6\x09\xca\xb2\x84\xe5\xbf\xe5\xfc\x8a\x24\x7a\xd0\xf8\x95\xbb\x67\x16\xca\xfe\xaf\x92\x29\xf5\x77\xe1\xde\xf9\x9b\x46\x83\x57\xa9\xae\xe1\x15\x4f\xfc\x8b\x6c\x53\xa8\x11\xf2\x5d\xb0\x6a\xf8\x0c\x00\x00\xff\xff\xd4\x2e\x64\x9d\xd4\x02\x00\x00")

func s3JsBytes() ([]byte, error) {
	return bindataRead(
		_s3Js,
		"s3.js",
	)
}

func s3Js() (*asset, error) {
	bytes, err := s3JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3.js", size: 724, mode: os.FileMode(420), modTime: time.Unix(1473089853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"s3.js": s3Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"s3.js": &bintree{s3Js, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

