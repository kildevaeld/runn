// Code generated by go-bindata.
// sources:
// docker.async.js
// builder.js
// DO NOT EDIT!

package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerAsyncJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x5b\x8f\xe2\x36\x14\x7e\x4e\x7e\x85\x89\xb4\x72\xb2\x40\xe8\xf3\x20\x5a\x55\xbd\x48\xdb\x87\x6e\xb5\x7d\x64\xd0\x28\x03\x06\xbc\x24\x4e\x6a\x3b\x74\x46\x33\xf4\xb7\xf7\x9c\x63\xe7\x06\xec\xce\x8e\x76\x97\x07\x48\x7c\xee\xc7\xe7\xfb\x6c\x8e\x99\x66\x66\xcf\x16\x4c\x8b\x7f\x6a\xa9\x45\xcc\xcd\x9e\x27\x93\x30\xd8\x96\xba\xc8\x6c\x5f\x50\x5b\x99\xf3\x24\x75\x02\xd0\xb8\x1b\x08\xd5\x46\x68\xb3\x2e\xb5\xe0\xc9\x3c\x0c\xc9\x6d\x2e\xd7\x02\x74\x7e\xd6\x3a\x7b\x4c\x2b\x5d\xda\xd2\x3e\x56\x22\xa5\x75\xd0\x09\xb7\xb5\x5a\x5b\x59\x2a\xf6\x6b\xb9\x3e\x08\x1d\x97\x15\xbe\x99\x84\x3d\x85\x81\x7f\x06\x73\xff\xf4\xfc\xfc\x74\x0a\x03\xbb\x97\x26\xdd\x88\xfb\x7a\xd7\x49\xdc\x7b\x78\x0a\x43\xf1\x50\x95\xda\x9a\xd4\xf9\x03\x0d\xf7\x30\xef\x85\x5a\x67\x79\x1e\xaf\x8b\xcd\x84\x65\x7a\x67\x26\x8c\x6c\x29\x62\x18\x50\xd2\x60\x15\x6d\x9c\x7d\xc4\xc6\x0c\x54\x53\xab\x65\x11\x27\x61\x20\xb7\x2c\x46\x2b\x52\x0f\x0c\x1b\x83\x2a\x29\xc5\xae\x44\x69\xe8\xd7\xeb\xfc\x44\x11\xd2\x8f\xa5\x54\x31\x67\x3c\x61\x37\xb4\x00\xdd\x09\xa0\x10\x8c\x63\x52\x53\xe5\xd2\x92\x34\x2d\xb2\x2a\x6e\xb3\x8c\x0b\x88\x01\xcd\xb5\xb5\x56\xac\xf0\x09\xcc\xd9\x29\xe9\xdc\x35\x8b\xd0\xc7\x60\x36\x6b\x52\x77\x9b\x13\xf3\x37\x86\xbd\x31\x7c\xc2\xda\x4a\x3b\x43\x28\xc4\x3b\x56\xe2\x5f\xf6\x97\x2e\x0b\x69\x44\x2f\xb4\x16\xa6\xcc\x8f\x62\x02\xe1\x3f\x8a\xb5\x75\xc5\x62\xe9\xae\x55\xf0\x12\xac\xa1\xeb\x65\x2e\xd2\xbc\xdc\xc5\x1c\x3b\x7a\x03\xa1\xb0\x32\x10\x16\xe5\xa6\x06\xd1\xdd\x5d\xa5\xe5\x31\xb3\xe2\xce\x35\x33\x86\x5e\x77\x31\x84\xd6\xe8\xdf\xd4\xb9\xf7\x4f\x01\x60\x35\x69\x8a\x76\xc1\x69\x69\x8e\x72\x9f\x55\xec\x8c\x7c\xf1\x24\x3a\x51\x47\xf1\x0b\x47\x80\x26\x8f\x66\xad\xdd\xfe\x6e\xf4\x9c\xb4\x00\x07\x12\xea\xae\xb0\x61\x4b\x2e\xd4\x11\xb2\xc7\x9f\xdf\x65\x2e\xf0\xb1\xaa\xef\x73\x09\x30\x80\xc7\x63\x99\xd7\x85\xa2\xd5\x5c\xaa\x03\x5f\x41\x04\x72\x97\xae\xb5\x80\xea\xb0\xe5\x6d\x55\x2a\x2b\xa0\x6d\xb2\xc8\x76\xf0\xf3\xd9\x61\x66\xcf\xcf\xec\xe9\x04\xfd\x62\xf0\xc1\x9c\xb6\x79\xb6\xa3\x74\x56\x50\x06\x2e\xc2\x46\xb2\x18\x25\x07\xf1\xc8\xa4\x1a\xb8\x73\x1a\x8d\xe9\x31\xcb\x3b\xc7\x4b\x50\x5f\xcd\x5b\x39\x76\x75\x34\xfa\xaf\xab\x38\x95\x80\xd3\x87\xf7\xdb\x18\xf4\x12\x74\xc6\x7a\x1f\xd4\x6e\xfb\xc0\x16\x0b\x8c\x9d\x50\x02\x0b\xea\xcf\x74\x8b\x82\x0b\x13\xec\x6c\xb9\x75\x79\x80\x11\x37\xb0\x39\x6a\xc7\xcf\xbd\xbb\x7c\x31\xd7\x65\x34\x9d\x22\x6c\xd0\xf3\x98\x45\x0b\x7c\x06\x49\x2f\x6f\xfc\x9c\x98\xc8\x8d\xa0\x08\x43\x78\x81\x6a\xe2\xa7\x26\x70\x0e\xe1\xfb\x0c\x3f\xc7\x1e\x7e\xf8\x74\xca\xdb\x68\x7c\x81\xcf\x47\xc4\x12\xcd\x95\x8f\xd2\xba\x83\x7e\xd2\x36\x90\x30\xe8\x76\x01\xf7\x00\x03\x7b\x45\xd2\x3c\x1c\x90\x2c\x22\xb7\x80\x79\xce\x6e\x37\xe3\x59\x6a\x85\xb1\xf1\xa1\x4d\x31\x08\x06\x7a\x3e\x60\x4f\x86\x34\x72\xd3\x48\xbd\xf7\xb4\xaa\xcd\x3e\x1e\x64\xee\xfa\x84\xfa\x98\xc8\xf2\xb0\x72\x05\x04\x61\x67\xe7\xbb\xe1\x0a\x1b\x34\x93\xe6\xcb\x39\xc5\x66\x75\x64\xd0\xf5\xbc\x4d\xec\x13\x76\xd7\xda\x08\x0d\xe9\x39\x08\xdd\xb7\x67\x52\x64\x1d\xaa\x7b\xee\x98\xd3\xb9\xca\x85\xda\xd9\x3d\xfb\x91\xfd\xe0\xfa\xe3\xb5\x3c\x6f\x45\xc0\x5b\xd1\xc4\x47\xed\x27\x89\x05\x92\xea\xb8\xe3\xb8\xe9\x86\x4d\xa7\x88\xb9\x45\xc3\x76\x3d\x00\xa2\x8d\xdf\x7f\xa2\xfc\x48\xd7\x2a\x6a\x48\xbf\x3b\x45\x12\xe4\x0c\x07\x68\x63\x33\x6d\x2f\xf0\x4c\x59\x0e\x1c\x91\x5e\xd4\x04\xeb\xb9\x9a\x83\xaf\xd9\xdb\xcf\x39\xbb\x46\x0e\xd8\xb3\x57\xf1\xc3\x0b\xec\xf0\x1a\x6a\x20\x68\x2f\x3a\xee\xc3\xb0\xbd\xb5\xc1\x7b\x43\x8a\xdf\x88\x34\x46\xd7\x31\xfd\x09\xc2\x40\x76\x18\x92\x43\x78\xa9\xf5\x1a\x16\x60\x3d\x16\xf8\xae\x38\x61\xd7\x70\xe2\x81\xe2\x70\xd2\x1e\xd1\x1e\x27\x23\x1a\xa9\x7d\x66\x7e\x29\x95\xcd\xa4\x82\xb3\x93\x06\xd1\xe1\x05\xb4\x11\x54\x38\xcd\x17\xe8\x41\x44\x00\x14\x1c\x28\x58\x03\x8a\x33\x30\x5d\xa0\xa4\xc7\xb3\x14\x59\x9a\x0f\xb5\x52\xc0\xe0\x57\xc2\x4a\x65\x2a\x38\x96\x7b\xa1\x5b\x99\xd9\xa7\xe2\x41\xac\x63\xee\x2f\x4f\x5e\x95\x4d\xb7\xec\xe9\x29\x7d\xb7\x39\x9d\xa8\x15\xe4\x13\xe0\xb1\x29\x6b\xdb\x5e\xac\x7a\x9c\xe8\x03\x79\x27\x0e\x46\x91\xb7\x43\x5e\x6b\xc2\x80\x1e\xf1\x9f\xd3\xff\x82\xa0\x44\x21\x7e\x16\xfa\x4e\x86\xb9\x00\x86\xdf\xce\x3a\x46\x28\xab\x01\x86\x2f\xc8\x80\xa3\x0a\xde\x7d\xf0\x4a\x9b\xd2\x12\xf4\xa5\x2e\x84\xb2\x26\x21\x42\xf0\xae\x74\xf1\x32\xb3\x70\x50\x9a\x6e\xc1\xdb\x12\xc5\xab\xa1\xb9\xfc\x22\x7b\x79\xd5\xfa\xbe\x96\xf9\x66\x60\x5f\x65\x76\x0f\xdc\x95\xed\x2e\x9d\x90\x32\xba\x81\x39\x06\x05\x4e\x6a\x13\x86\x16\x03\xa7\xed\x98\x5c\x4f\x0c\x27\x5b\x0b\x14\xe2\x2d\xf3\x83\xd8\xfd\xf6\x50\xc5\xfc\xf6\xd6\xbc\x8d\x9b\x1d\x41\x78\x24\xb0\x32\xe6\xc9\x59\x0e\x95\xc1\xfb\xed\x5e\xa8\x1e\x96\x61\x8f\xdc\x28\xb6\x17\xc4\x9d\x3b\x69\x51\xe0\x6f\x80\x6d\x72\x7d\xf4\x7c\x9f\xfc\xe0\x42\x38\xcd\xbe\x32\x4b\xe0\xd3\xe1\x19\x01\xce\x2f\xcf\x9b\xca\xc0\x61\x33\x1a\xc1\x33\xfc\xa5\x80\xab\x53\x16\xad\xe0\xaf\xc4\x72\x75\x56\xef\x3b\xc4\xf3\xb7\xa9\xf5\xac\x5a\x62\x8a\xaf\xdd\x91\x06\x99\x2f\x4f\xb1\xd7\xf4\xc7\x39\xa4\xf3\x52\xdc\x3f\xfe\x7e\xff\x67\x5a\x65\x1a\xfe\xc5\xb4\x91\x31\xf0\xff\x01\x00\x00\xff\xff\xf1\x55\x12\x55\xdb\x0e\x00\x00")

func dockerAsyncJsBytes() ([]byte, error) {
	return bindataRead(
		_dockerAsyncJs,
		"docker.async.js",
	)
}

func dockerAsyncJs() (*asset, error) {
	bytes, err := dockerAsyncJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker.async.js", size: 3803, mode: os.FileMode(420), modTime: time.Unix(1473502323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _builderJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x3a\x5b\x73\xa3\xc8\xd5\xef\xfa\x15\x48\xf5\x7d\x2b\x98\xa1\xb0\x37\x0f\x79\xb0\xd6\x0f\xb3\xb3\x93\x4a\x1e\x92\x49\x65\xf3\x92\x72\xa9\x5c\x18\xb5\xec\x5e\x23\x20\x34\x68\xc6\xf1\x28\xbf\x3d\xe7\x9c\xbe\xd0\x34\x8d\xc0\x73\x5b\x6a\x6a\x2c\xe8\xd3\xe7\x7e\xeb\xcb\xe2\x98\xd6\xc1\x6d\x70\x1d\xd4\xec\xdf\x2d\xaf\x59\xb8\x6e\x8b\x1d\xab\x45\x56\xd6\x6c\x1d\xc5\x8b\x00\x9e\x7d\x59\x1f\xd2\xa6\x07\xd3\xf0\x7c\x1d\x25\x72\x40\x01\x89\x83\x0d\x01\xaf\x7a\xfa\x2f\x65\xf6\xc8\x6a\x7b\x70\x47\x5f\x92\x54\x3c\x15\x19\xa0\x91\x00\x12\xf8\xdd\x91\x15\xcd\xbb\x03\x6f\x9a\xfe\x14\x86\xdf\x05\x00\xdb\x00\x9b\xc5\x62\xb1\x6f\x8b\xac\xe1\x65\x11\x70\xf1\xfe\xee\x37\x96\x35\x61\x79\xf7\x5b\x14\x3c\x13\xb6\x9a\x35\x6d\x5d\x04\xf0\x25\xb8\xbe\xbe\x0e\x2c\x80\xcd\xe2\xb4\x20\xd9\x59\x9a\x3d\xbc\x41\x46\x80\x9a\xc1\x15\xe6\x5c\x34\x71\x90\xdd\x69\x44\x08\xc9\x01\xe2\x32\x0e\x72\xf8\x83\xc3\x49\xce\x8a\xfb\xe6\x21\x06\x22\xa2\xcd\x51\x3d\x37\x5b\x60\xc8\x22\x5b\xb0\x8f\x4d\x18\x25\xcd\x03\x2b\xc2\x0e\xb5\x46\x69\x01\x4a\x0c\x1b\xfa\x7c\x8a\x14\x12\x33\x43\xa2\xb1\x66\xf1\x7d\x10\x02\x33\xc0\x46\xa4\x31\xfc\xbd\x2e\x0f\x5c\xb0\x04\x30\x95\xf9\x91\x85\x12\x63\xb4\x71\x29\xb9\x70\xd9\x1d\x89\x7a\xc3\x5f\xbf\xde\x46\x03\x56\x61\x92\x4d\x57\xe2\x41\xc4\x49\xd5\x8a\x07\x1a\xde\x38\xa3\x96\xe0\x66\xe4\xa4\xa0\x4e\x46\xe9\x3f\xb7\x3c\xdf\x91\x81\x2d\x6a\xb7\xb7\xa2\xad\x58\x8d\x14\xfb\x0a\x50\xd0\xe1\xa1\xdc\xb5\x39\x13\x71\xc0\x8a\x63\x1c\xec\xd8\x5d\x7b\x6f\xb3\xa7\xe6\x27\x59\x9a\xe7\x61\xf3\xc0\x85\xc5\x1c\xbe\x26\x6a\x3e\x50\x55\xbf\x9c\x71\x40\x0b\x63\xf8\xff\xc5\xc5\xa7\x4f\xeb\x1d\xf8\x5c\x5e\x56\x07\xf0\xb7\x75\x07\x79\x71\x41\xb0\xa2\x49\xeb\xa6\xad\x42\x97\xc6\x4e\x3b\x7b\xc1\x3e\x28\xcf\x0f\x9f\x89\xd5\xab\xe5\x92\xfe\x1a\x6d\x38\x52\xde\xb3\xe6\x6d\xcd\xd2\x86\xbd\xaf\xf0\x5d\xa0\xb8\x24\xaa\x2d\x23\x2a\xaf\x6c\xd1\xd9\x9e\x4f\xbd\x8f\xec\x63\x96\xb7\x3b\x86\x5e\xb8\x2e\xd2\x03\x5b\xc7\xc1\xba\x2a\x45\x53\xb7\x05\xfd\xac\x59\xf7\xeb\x0e\xf5\xa9\x01\xf4\x4b\xcf\x8e\x6b\x03\xb2\x63\x15\x83\x84\x50\x64\x9c\x09\x9a\xf2\x90\x0a\xa6\xf0\x90\x0e\x34\x1e\xf9\xb2\xed\x39\x29\x48\x90\xd0\x04\x63\x53\x7b\x74\xf9\xa6\xae\xd3\xa7\x84\x0b\xfa\x1b\x05\x06\x1a\x85\x30\x2f\xdb\xcd\x70\xe2\x72\xf9\x5f\x33\x9e\x70\x60\xef\xe3\xfb\x7d\x88\x9a\x72\xbd\x15\x1f\xc1\xf2\x7d\xd2\xd4\xfc\xfe\x1e\x4c\xb1\x2e\xca\x86\xef\x79\x96\xa2\x8a\x81\xf5\x22\x11\x8f\xbc\xaa\x78\x71\x1f\x23\x7d\xc7\x9d\x2d\x97\x06\xa5\xf7\xc7\x3a\xf5\x77\xbf\x20\x1f\x06\x21\x5a\xe3\x91\x3d\x05\xbc\x20\x8c\xae\xe4\x38\x7c\x4c\xf3\x96\x49\x37\xbc\x01\x50\x8f\x88\xf0\xf5\xe6\x72\x8b\x31\xbe\xfa\xbf\x95\x4f\x2a\x05\x94\x88\xf6\x0e\x8c\x1c\xfe\x18\x51\x82\x73\xbc\xc5\x7e\xa4\xd7\xdc\x26\x10\x9a\x60\xd0\x10\x5e\x63\x43\xdf\x23\xf6\x29\x60\x39\x58\xc2\x4f\xa6\xaa\xcb\x8c\x09\x91\x54\x79\xda\x60\x0d\xf8\x5a\x34\x17\x23\x1c\x80\xbd\x95\x7f\x1b\x6b\x03\x8a\x68\xa0\x5b\x7c\xb2\xb2\x68\x78\xd1\xb2\x8d\x0f\x99\x5f\x8f\xa6\x72\x90\x5d\xa2\xe0\x87\x1f\x82\xbe\x6f\xaa\x81\x31\x31\xb5\x39\x07\x11\x4c\x03\x32\x86\x7d\xd2\x8e\x30\xf3\x27\x95\x11\x0c\x55\xbf\x48\x4a\xc1\xa4\x4c\x20\x4e\xc0\x93\x1e\xea\x7a\xb3\x9b\x84\x20\x49\xfc\xb9\x2c\x1f\xc3\x07\xf8\x2f\xd6\xfe\x6b\xb3\xd7\x3c\x55\xac\xdc\x93\x15\x11\x66\x4b\xfe\xb0\xd6\xf3\xd7\xa3\x05\xc9\x4c\x90\xe9\x99\x72\x1b\xa2\x9f\x2e\x51\xfd\x74\x69\x9c\x49\x15\x85\x04\x7c\xb1\x29\x91\xab\xb8\xd7\x3b\xd8\xdf\xc1\x4b\x0c\x11\x4a\x6c\x57\x81\xbf\x1c\x4b\x63\xd6\x94\x32\x40\xa5\x98\xd0\x37\x83\x41\xc2\x20\xd4\xb0\xae\x29\xc9\x21\xad\xac\x52\x26\x1a\x56\x8d\x45\xed\x12\x07\x13\xc2\x62\xb4\x55\xb4\x79\x3e\x9a\x7a\x10\x7e\x03\x75\xe7\x36\xa9\x78\xf6\x48\xb8\x63\xc8\xf2\x5d\x16\xf7\x66\xf4\x6d\xd4\x77\x06\xe8\xd6\x78\x0e\x8a\x19\x72\x69\xd3\x09\x96\xd7\xc4\x0c\xc0\x0f\xd8\x71\x64\x74\x9c\xc3\xc7\x38\x66\xde\x5b\x62\xe7\xaf\xa4\x26\x69\x7b\xfc\x3c\x96\x6d\xa9\xfb\x59\xf8\x7a\x0a\xed\x16\x88\x41\x9a\x80\x40\xcd\xc4\xb8\xfb\x6d\x93\xb4\x4d\xed\xe1\xf8\xac\xb5\x27\x2a\x07\x51\x19\xa9\x1c\xc6\x51\x64\x96\x97\xb0\x7d\x90\x41\xce\x57\xf0\xd7\x01\x76\xe0\x7b\x5e\xb0\xdd\x68\x34\x45\xc3\x8a\x41\xb3\x55\xfb\x01\x96\x66\x88\x88\x2c\x09\xd9\x4c\x8e\xf1\x43\x7a\x6f\x3e\xa3\xdd\x83\x97\xd6\x4a\xc2\x33\x51\x28\x07\xac\x3a\x79\xd8\x6b\x5c\x9d\x76\x6c\x5f\x46\x2a\xe7\x7a\x67\x07\x05\xb1\xae\x16\x16\x84\x62\xa0\x11\x42\x29\xb5\xf0\xe9\x13\xfe\xc4\x3e\xc9\x11\xc4\xe7\xf6\x0e\x0f\x90\x3b\x27\xfc\xbe\x93\xc6\xea\xaf\x50\x1c\xef\x24\x1f\x8d\x31\x02\xfa\xf9\x12\x3b\x79\x18\x1e\x34\x37\x8e\x4a\x86\x95\xca\xd2\x93\x1d\x79\xd4\x04\xda\x21\x97\xb6\x4d\xf9\xb3\x4c\x75\x13\x81\xe7\x73\x0b\xb3\x36\x0b\xed\x5c\x1b\x9f\x0f\x69\x7c\x06\xcd\xa7\x4f\xb0\x61\x0f\x6a\xcd\x39\xd3\x8e\x8e\x23\xf3\xf6\xa5\x64\xab\xb1\xe6\xd4\x28\xee\xcb\x9a\xd4\xbe\xde\xfc\xe3\xa7\x89\x7e\x0b\x1f\xb4\x0a\x46\x85\xca\x5a\xf8\xd3\x0b\x53\xc9\x20\xc7\x2a\x78\xe3\x25\x66\x47\x23\x68\xe3\x2d\x74\x30\x29\x64\xb4\x3a\xa4\x98\x8b\x27\xe7\x70\xf1\x8f\xb6\x28\x40\xe2\xb9\x13\x80\xc8\x5f\x30\xb2\x25\xfc\x00\xdc\x67\x36\x4f\x61\xd1\x72\xf9\x23\x75\xc6\xf2\xd8\x7e\x3e\xdb\xd8\x18\x44\xc6\xd8\xa3\x58\xd0\xe3\x80\x83\x9b\x1f\x69\x99\x00\x0b\xbd\x51\x47\xf7\xd2\x5d\xd9\x74\x57\x48\x37\xcd\xa1\x79\xdd\x3d\xfd\x8a\xe4\x99\x4e\x1f\xb3\xf2\xc7\x3e\x85\xe6\xfa\x4c\x06\xe9\x3a\x79\x64\xf8\xb2\xc7\xf0\x1c\xfc\x76\x79\xd0\x8b\xce\xb3\xba\xd1\xcf\x4b\xf3\xaa\x7e\x66\x01\x79\x0a\x0f\x31\x17\x8e\xd4\x16\xdf\xe3\xa9\x37\x5f\x4b\x06\xc5\x1e\xea\xf9\x8b\xf8\x70\xac\xf7\x87\x2d\xf6\x88\x88\x15\x3b\x0b\x93\xdf\xe7\xfa\xe0\xdc\xd6\xf0\x5b\xab\xe5\xb3\x5d\xea\x34\xab\x29\xf1\x3d\xb4\x77\x23\x57\x86\xbe\xc5\x22\x2d\x89\x4c\xb1\x98\x36\x99\x25\x8c\xed\x82\x19\x21\xa5\x34\xd8\x6b\x78\xe4\x07\x45\x7f\x8e\x98\x17\xaf\xbe\x93\xe7\xbd\xba\x98\xf2\xbd\xf3\x64\xbf\xa2\x5e\x7f\xaf\x7c\xf3\xed\xec\xf8\xa5\x9c\x39\x1c\xce\xb3\xa9\x7e\x66\x64\x37\xec\x2e\x47\xc7\xfc\x7d\xcc\x20\x00\x85\xac\x58\xe7\x44\xc2\xec\x35\x03\x0c\x9f\x39\xd5\x99\xbd\xa4\xbb\xee\x2d\x07\x66\xb9\xd3\x98\xe0\x4e\x13\x33\xd4\x84\xdc\x9d\x17\x67\x96\x49\x0a\x62\x74\xd5\xd3\xef\xe6\xcb\xea\xb3\xb7\x4a\xce\xb6\xf0\xb0\x3a\x3c\xb2\x5a\xc0\xea\x70\xa2\x99\x9f\xb3\xda\xeb\x7a\x45\x53\x78\xa7\x17\x71\x8f\x67\x57\x05\x38\xac\x7b\xe9\xf1\xd6\xf3\x9c\x93\x94\xbd\x7e\x7d\xde\x6a\x11\x93\x4d\x59\x9d\x73\x8e\x97\x44\xb1\xb7\x3d\x29\xab\xa9\xee\xe4\xe4\xdd\x95\x99\x4b\x78\x8e\x5e\xce\x07\x8f\x3f\x68\x8c\x5a\x7c\xcc\x4d\x45\xc5\xe8\xa9\xc0\xc0\x1b\xdd\xb0\x80\xae\xa4\xc9\x1e\x2c\x54\xde\xfe\x66\x0e\x2e\x4b\xb4\x6e\x87\x84\x36\x9d\xcf\x6c\x41\xd8\xc1\x58\xb3\x43\x79\x64\xbf\x73\x38\xe2\x93\x41\xdd\x29\xa1\x61\xcb\xcb\xfb\x70\x4d\x5c\x81\xa3\x07\xd2\x3c\x23\xd1\x67\x8e\x05\x3f\x68\xe1\xfb\x39\x0b\x37\x8a\xf0\x1c\x15\xf4\x51\x8f\x2e\xa9\x04\x6b\xfe\xc9\x0f\xac\x6c\x9b\x99\x01\x30\x64\x94\xed\x7a\x7c\x9e\x5b\x47\x9b\x5d\x6b\x7f\x20\x9e\xe2\xe0\x8f\x97\x97\xc3\xb1\xd3\x60\xd7\xf5\xab\xf9\x62\xe7\x15\x6a\x3f\xc6\xd4\x83\x8b\x57\x7b\x71\xd0\x0d\x43\x87\x1e\x2a\x0d\x34\x43\x57\xc1\x70\xa7\xdc\x80\xc8\x53\xf5\x2b\x67\x11\xff\x4c\x7b\x00\x57\xc1\x4a\x1d\x72\xc2\xea\x70\x0f\x66\xbb\x0a\x20\xa0\x0b\x3c\xfc\x6b\xca\x2b\x7d\x44\x88\x3e\xea\x9d\x4b\xc3\x66\xe6\x8a\x96\x96\x2b\x39\x75\xa5\x77\x4e\x57\x23\x93\xd7\xba\x4a\xca\xc9\x6a\xaf\x1b\x26\xe0\x16\xb7\xce\xad\xeb\xad\x62\x44\xaf\x97\xd7\xe3\xd8\x28\x7d\x28\x19\x0c\xb8\x99\xae\xf0\x75\x55\x77\xdb\x21\xc2\x65\xc9\x5d\x9a\x3d\x82\x92\xfa\x86\x2b\x8b\xc1\x51\x02\x69\x53\xd2\x41\xdc\xde\xd5\xad\x5e\x31\x83\xc1\xde\xfc\xfa\xaf\xbf\xbd\x75\xac\x1c\x2f\x1c\x22\x83\x1d\xb5\x6f\x43\xa4\x5f\xe8\x3f\x87\x86\x93\x84\x17\xfd\x5f\xd4\xe5\x2f\xac\x79\xca\x29\x17\x8b\x53\x14\xda\xe7\x36\x91\x73\xa7\xc3\x1c\x86\xa5\xce\x9d\x8e\x14\x97\x9f\xea\x34\x2a\x75\x4e\xa1\xe8\x9e\xc1\x82\x7d\xac\xca\xba\x11\x2a\x30\xba\x2b\x07\xd6\xee\xa4\xef\x2a\x81\x73\x08\x97\xf6\xf6\xed\x80\x52\x90\x3a\x47\x52\x74\xe0\x5b\x94\x1f\x8a\xdb\xee\x82\xc1\xf3\xa9\x7f\x15\xc4\xdd\x15\x4f\xbb\x70\x1e\xb4\x26\xaa\xb5\x77\xfc\xcd\x3a\x7c\x53\x10\x09\x2f\x78\xc3\xd3\x9c\xff\x87\x0d\x4e\xe1\x46\xfb\x3f\x97\x91\x21\x2e\xc3\xc0\x74\x17\x65\x1d\x1e\xe9\x05\x98\x9b\x00\x7d\x45\x48\xc1\x76\x5e\x79\x9a\xa5\x8d\x1e\xaa\x2a\x85\x24\x29\xb7\x0e\x34\x4c\xdc\xb7\x42\x34\x3c\x77\x97\xe7\xd1\x37\x9e\xf3\x76\xad\x06\xfb\xba\x83\x3e\x0b\xf3\x6b\x93\xd4\xf7\x8b\x05\xee\xc5\xe1\xf0\x14\x23\x0b\x6e\x66\x1f\x6f\x78\x01\x58\xde\xb4\xd1\x5a\xd8\x0c\x65\x32\xc7\x91\x08\xfc\x0d\x4f\x21\xbf\xf3\xe9\xa3\xff\x40\x00\x3b\x08\x7d\x1b\x88\x6e\x13\x58\xe1\x6b\xcd\x38\x75\xd7\xbb\x0a\xbc\xd1\xa3\x12\x81\xdd\x8e\x52\x90\xd2\x04\x5d\x0f\x7a\xa5\x41\x8d\xc8\xca\x60\x17\x09\x6b\x84\xed\xf4\x00\xdb\x99\xef\xb4\x38\xd4\xa8\xcc\xf7\xfe\xd6\x2a\x0c\xab\x0f\x7d\x28\x7a\x7b\x57\xd7\x65\x6d\x10\xe0\x8b\x1a\xd5\x35\x50\x97\xde\x8e\x1b\x55\x88\xb4\x4d\xba\x6f\x1a\xd7\x9d\x54\x59\x87\x4b\x9f\x27\x60\x8d\x57\x3f\x57\xa8\x31\x63\x9d\x19\xe1\x65\xdd\x8c\x53\x47\x06\x3a\x00\xf0\x55\x59\x83\x5c\xad\x37\xef\x06\x47\xb7\xb6\x5b\x7a\x86\x3b\x64\x2a\xd3\x76\x7b\x90\xf2\xaa\x46\xf2\xc8\x9e\x44\xe8\x43\xac\xae\xe5\x05\x3f\x05\x36\xa4\x0e\x20\x35\xfa\x52\xf2\x46\x16\x5f\x8c\xbb\xf7\xb3\x60\x4c\x58\xda\xb0\x41\x0d\x9c\xb9\x29\xa4\x2e\x15\x72\xfc\x8b\x13\x15\x83\x1b\x18\xf8\x09\xbe\xc2\xdf\xd7\xaf\x7d\x8d\x3e\xf0\xab\x66\xdc\xf0\xed\x68\x66\xa4\xbd\x2f\x27\x2b\x9a\x20\x51\xa2\x9d\xec\x82\xeb\xcb\x6b\x93\xf9\xcc\xf2\x84\x3d\xaf\x05\xe6\xd8\x6e\x9f\x68\x4c\x52\x83\x72\x4a\xe2\x9e\xb4\x66\x16\x48\xdd\xa5\x2a\x39\xdc\x37\xa4\xee\xf2\x2d\x30\xcb\x38\x38\x6a\xa3\xb3\x92\x07\x89\x51\xb6\xc5\x8e\xae\x2e\xed\xb9\xbe\xb8\xd4\x65\xae\xc1\x1d\x2b\x95\x9d\x8e\x89\x0c\x84\xee\xf0\xac\x57\xe2\xcc\x6f\x74\x24\x49\xc1\x54\x98\xee\x8a\x4f\x0f\x6a\x89\xec\xfa\xcc\xff\x42\x06\x67\x32\xe9\x32\x6a\xd8\x20\x72\x51\x57\x8f\x46\x54\xed\x54\xb6\xe1\xbd\xa5\x53\x5f\xcd\x02\xc4\xeb\x84\x40\x59\xcf\x4a\x41\x9e\xd0\xc1\x3b\x9e\x68\x4d\x3c\x2b\x7f\xa7\x80\xe3\xf0\x80\xd3\x69\x5f\xe8\x1c\x19\x1b\xcd\xc3\x68\xc4\x3b\xe8\x97\x4b\xc5\xdd\xc1\xe9\x03\x6c\xf6\x46\x2f\xe9\x19\x1e\x87\x56\x9a\x5c\x6a\xfa\x3c\xd2\x39\x98\x73\x9d\x10\xf5\xef\xb2\xd2\x3c\xd4\xe5\x07\x2a\xb4\x54\x3d\x42\x79\xc7\x3b\x5c\x67\xbc\xce\x72\x86\xf1\x73\x15\xfc\xbf\x08\x52\x70\x3f\xf8\x23\x65\x14\xb0\x86\xa0\xad\x85\x12\xba\x37\xa8\x31\x64\xd8\xa4\xdb\xba\xa6\xd5\x76\xe4\xf3\x82\x91\x7c\xe3\xcf\x33\xdf\x3b\x46\x07\x6e\x6f\x6d\xe6\x81\x0c\xf0\xef\x7f\x01\x00\x00\xff\xff\xbb\xe8\x77\x8c\x3e\x2f\x00\x00")

func builderJsBytes() ([]byte, error) {
	return bindataRead(
		_builderJs,
		"builder.js",
	)
}

func builderJs() (*asset, error) {
	bytes, err := builderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "builder.js", size: 12094, mode: os.FileMode(420), modTime: time.Unix(1473503673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker.async.js": dockerAsyncJs,
	"builder.js": builderJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"builder.js": &bintree{builderJs, map[string]*bintree{}},
	"docker.async.js": &bintree{dockerAsyncJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

